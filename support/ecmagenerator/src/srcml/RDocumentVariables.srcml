<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RDocumentVariables.h">
  <comment type="block">/** * Copyright (c) 2011-2014 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RDOCUMENTVARIABLES_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDOCUMENTVARIABLES_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"core_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDocumentVariables.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RLayer.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RObject.h"</cpp:file></cpp:include>
  <comment type="block">/** * This type of object is used to store
  document wide variables. * * \ingroup core * \scriptable *
  \sharedPointerSupport */</comment>
  <class>class 
  <macro>
    <name>QCADCORE_EXPORT</name>
  </macro>
  <name>RDocumentVariables</name>
  <super>: 
  <specifier>public</specifier>
  <name>RObject</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyCustom</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyHandle</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyCurrentLayerId</name>
  </decl>;</decl_stmt></public>
  <public>public: 
  <constructor>
    <name>RDocumentVariables</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>RDocument</name>*</type>
        <name>document</name>
      </decl>
    </param>, 
    <param>
      <decl>
      <type>
        <name>
        <name>RObject</name>::
        <name>Id</name></name>
      </type>
      <name>objectId</name>=
      <init>
        <expr>
          <name>INVALID_ID</name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <member_list>: 
    <call>
      <name>RObject</name>
      <argument_list>(
      <argument>
        <expr>
          <name>document</name>
        </expr>
      </argument>, 
      <argument>
        <expr>
          <name>objectId</name>
        </expr>
      </argument>)</argument_list>
    </call></member_list>
    <block>{ }</block>
  </constructor>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RDocumentVariables</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>void</name>
  </type>
  <name>init</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function>
    <type>
    <name>virtual</name>
    <name>RDocumentVariables</name>*</type>
    <name>clone</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>new 
    <call>
      <name>RDocumentVariables</name>
      <argument_list>(
      <argument>
        <expr>*
        <name>this</name></expr>
      </argument>)</argument_list>
    </call></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>bool</name>
    </type>
    <name>isSelectedForPropertyEditing</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <name>false</name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QPair
    <argument_list>&lt;
    <argument>
      <name>QVariant</name>
    </argument>, 
    <argument>
      <name>RPropertyAttributes</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getProperty</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RPropertyTypeId</name>&amp;</type>
      <name>propertyTypeId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>humanReadable</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>noAttributes</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>setProperty</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>RPropertyTypeId</name>
      </type>
      <name>propertyTypeId</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QVariant</name>&amp;</type>
      <name>value</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>RTransaction</name>*</type>
    <name>transaction</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function>
    <type>
      <name>
      <name>RLayer</name>::
      <name>Id</name></name>
    </type>
    <name>getCurrentLayerId</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>currentLayerId</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setCurrentLayerId</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>
          <name>RLayer</name>::
          <name>Id</name></name>
        </type>
        <name>id</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>currentLayerId</name>= 
    <name>id</name></expr>;</expr_stmt>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RLayer</name>::
      <name>Id</name></name>
    </type>
    <name>currentLayerId</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RDocumentVariables*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RDocumentVariables&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RDocumentVariables&gt;*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
