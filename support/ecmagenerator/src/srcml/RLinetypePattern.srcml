<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RLinetypePattern.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RLINETYPEPATTERN_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RLINETYPEPATTERN_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QMetaType&gt;</cpp:file></cpp:include>
  <comment type="block">/** * Represents a linetype pattern which
  can be used to draw * dashed graphical elements. * * \scriptable
  * \copyable */</comment>
  <class>class 
  <name>RLinetypePattern</name>
  <block>{
  <private type="default"></private>
  <public>public: 
  <comment type="block">/** * \nonscriptable */</comment>
  <constructor_decl>
  <name>RLinetypePattern</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>num</name>
      <param>...</param>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>set</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>const</name>
        <name>QList
        <argument_list>&lt;
        <argument>
          <name>double</name>
        </argument>&gt;</argument_list></name>
      </type>
      <name>dashes</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <constructor_decl>
  <name>RLinetypePattern</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RLinetypePattern</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RLinetypePattern</name>&amp;</type>
      <name>other</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <name>~RLinetypePattern</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isValid</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>int</name>
  </type>
  <name>getNumDashes</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getPatternLength</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getDashLengthAt</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>i</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getLargestGap</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasDashAt</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>pos</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getDelta</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>pos</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isSymmetrical</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>i</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>scale</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>factor</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
  <name>RLinetypePattern</name>&amp;</type>
  <name>operator=</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RLinetypePattern</name>&amp;</type>
      <name>other</name>
    </decl>
  </param>)</parameter_list>;</function_decl></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>num</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
    <name>double</name>*</type>
    <name>pattern</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
    <name>bool</name>*</type>
    <name>symmetrical</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <function_decl>
  <type>
    <name>QDebug</name>
  </type>
  <name>operator&lt;&lt;</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RLinetypePattern</name>&amp;</type>
      <name>p</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RLinetypePattern*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const RLinetypePattern*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RLinetypePattern</argument>)</argument_list>
  </macro>
  <typedef>typedef 
  <type>
    <name>QMap
    <argument_list>&lt;
    <argument>
      <name>QString</name>
    </argument>,
    <argument>
      <name>RLinetypePattern</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>_RMapQStringRLinetypePattern</name>;</typedef>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    _RMapQStringRLinetypePattern*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    _RMapQStringRLinetypePattern</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
