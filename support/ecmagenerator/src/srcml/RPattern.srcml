<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RPattern.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RPATTERN_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RPATTERN_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QChar&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QMap&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QPainterPath&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QSharedPointer&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RBox.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RShape.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RPatternLine.h"</cpp:file></cpp:include>
  <comment type="block">/** * Represents a hatch pattern. * *
  \ingroup core * \scriptable * \hasStreamOperator */</comment>
  <class>class 
  <name>RPattern</name>
  <block>{
  <private type="default"></private>
  <public>public: 
  <function_decl>
  <type>
    <name>static</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>QPair
      <argument_list>&lt;
      <argument>
        <name>QString</name>
      </argument>, 
      <argument>
      <name>RPattern</name>*</argument>&gt;</argument_list></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>loadAllFrom</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>fileName</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <constructor_decl>
  <name>RPattern</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RPattern</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>name</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>description</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <name>~RPattern</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>isValid</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>!
    <name>fileName</name>.
    <call>
      <name>isEmpty</name>
      <argument_list>()</argument_list>
    </call></expr>;</return>}</block>
  </function>
  <comment type="block">/** \return the fileName of this pattern.
  */</comment>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getFileName</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>fileName</name>
    </expr>;</return>}</block>
  </function>
  <comment type="block">/** \return the name of this pattern.
  */</comment>
  <function>
    <type>
      <name>const</name>
      <name>QString</name>
    </type>
    <name>getName</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>name</name>
    </expr>;</return>}</block>
  </function>
  <comment type="block">/** * \return True if this pattern is
  already loaded. */</comment>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>isLoaded</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>true</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>load</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ }</block>
  </function>
  <function>
    <type>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RPatternLine</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>getPatternLines</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>patternLines</name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>scale</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>f</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>rotate</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>a</name>
    </decl>
  </param>)</parameter_list>;</function_decl></public>
  <private>private: 
  <comment type="line">//! Pattern file name</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>fileName</name>
  </decl>;</decl_stmt>
  <comment type="line">//! Pattern name</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>name</name>
  </decl>;</decl_stmt>
  <comment type="line">//! Pattern description</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>description</name>
  </decl>;</decl_stmt>
  <comment type="line">//! List of pattern line
  definitions.</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RPatternLine</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>patternLines</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <function_decl>
  <type>
    <name>QDebug</name>
  </type>
  <name>operator&lt;&lt;</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RPattern</name>&amp;</type>
      <name>p</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RPattern</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RPattern*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
