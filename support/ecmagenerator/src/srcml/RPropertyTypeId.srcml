<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RPropertyTypeId.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RPROPERTYTYPEID_H_</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RPROPERTYTYPEID_H_</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;typeinfo&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QMap&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QMetaType&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QSet&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDebug.h"</cpp:file></cpp:include>
  <comment type="block">/** * Represents unique property type IDs.
  Every property type an object can have * has such an unique ID. *
  * E.g. all objects of type car may have a property * type called
  brand. This property type is uniquely identified by an instance *
  of this class. All instances of this class are automatically
  unique. * * \code * class Car { * public: * static
  RPropertyTypeId propertyBrand; * } * * RPropertyTypeId
  Car::propertyBrand(typeid(Car)); * \endcode * * \ingroup core * *
  \scriptable * \copyable */</comment>
  <class>class 
  <name>RPropertyTypeId</name>
  <block>{
  <private type="default"></private>
  <public>public: 
  <comment type="block">/** * \ nonscriptable */</comment>
  <comment type="line">//RPropertyTypeId(const std::type_info&amp;
  classInfo, const QString&amp; groupTitle,</comment>
  <comment type="line">// const QString&amp; title);</comment>
  <comment type="block">/** * \ nonscriptable */</comment>
  <comment type="line">//RPropertyTypeId(const std::type_info&amp;
  classInfo, const RPropertyTypeId&amp; other);</comment>
  <constructor_decl>
  <name>RPropertyTypeId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>customPropertyName</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RPropertyTypeId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RPropertyTypeId</name>&amp;</type>
      <name>other</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RPropertyTypeId</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>long</name>
      <name>int</name>
    </type>
    <name>id</name>=
    <init>
      <expr>
        <name>INVALID_ID</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</constructor_decl>
  <function_decl>
  <type>
    <name>long</name>
    <name>int</name>
  </type>
  <name>getId</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getCustomPropertyName</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isValid</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isCustom</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <comment type="block">/** * \nonscriptable */</comment>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>generateId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>
      <name>std</name>::
      <name>type_info</name></name>&amp;</type>
      <name>classInfo</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>groupTitle</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>title</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>forceNew</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * \nonscriptable */</comment>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>generateId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>
      <name>std</name>::
      <name>type_info</name></name>&amp;</type>
      <name>classInfo</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RPropertyTypeId</name>&amp;</type>
      <name>other</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * \nonscriptable */</comment>
  <function_decl>
  <type>
    <name>static</name>
    <name>QSet
    <argument_list>&lt;
    <argument>
      <name>RPropertyTypeId</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getPropertyTypeIds</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>
      <name>std</name>::
      <name>type_info</name></name>&amp;</type>
      <name>classInfo</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * \nonscriptable */</comment>
  <function_decl>
  <type>
    <name>static</name>
    <name>bool</name>
  </type>
  <name>hasPropertyType</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>
      <name>std</name>::
      <name>type_info</name></name>&amp;</type>
      <name>classInfo</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>RPropertyTypeId</name>
      </type>
      <name>propertyTypeId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getPropertyGroupTitle</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getPropertyTitle</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>RPropertyTypeId</name>
  </type>
  <name>getPropertyTypeId</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>groupTitle</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>title</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>operator ==</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RPropertyTypeId</name>&amp;</type>
      <name>other</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>operator !=</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RPropertyTypeId</name>&amp;</type>
      <name>other</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>operator &lt;</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RPropertyTypeId</name>&amp;</type>
      <name>other</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl></public>
  <public>public: 
  <decl_stmt>
  <decl>
    <type>
      <name>const</name>
      <name>static</name>
      <name>long</name>
      <name>int</name>
    </type>
    <name>INVALID_ID</name>
  </decl>;</decl_stmt></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>long</name>
      <name>int</name>
    </type>
    <name>id</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>customPropertyName</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>long</name>
      <name>int</name>
    </type>
    <name>counter</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>QMap
      <argument_list>&lt;
      <argument>
        <name>QString</name>
      </argument>, 
      <argument>
        <name>QSet
        <argument_list>&lt;
        <argument>
          <name>RPropertyTypeId</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>propertyTypeByObjectMap</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>QMap
      <argument_list>&lt;
      <argument>
        <name>long</name>
        <name>int</name>
      </argument>, 
      <argument>
        <name>QPair
        <argument_list>&lt;
        <argument>
          <name>QString</name>
        </argument>, 
        <argument>
          <name>QString</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>titleMap</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <function_decl>
  <type>
    <name>QDebug</name>
  </type>
  <name>operator&lt;&lt;</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>RPropertyTypeId</name>&amp;</type>
      <name>p</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>uint</name>
  </type>
  <name>qHash</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>RPropertyTypeId</name>
      </type>
      <name>propertyTypeId</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RPropertyTypeId</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RPropertyTypeId*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const RPropertyTypeId*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSet&lt;RPropertyTypeId&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QList&lt;RPropertyTypeId&gt;</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* RPROPERTYTYPEID_H_ */</comment>
</unit>
