<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./entity" filename="RDimOrdinateEntity.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RDIMORDINATEENTITY_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDIMORDINATEENTITY_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDimensionEntity.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDimOrdinateData.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>RDocument</name>;</class_decl>
  <class_decl>class 
  <name>RExporter</name>;</class_decl>
  <comment type="block">/** * Ordinate dimension entity class. * *
  \scriptable * \sharedPointerSupport * \ingroup entity
  */</comment>
  <class>class 
  <name>RDimOrdinateEntity</name>
  <super>: 
  <specifier>public</specifier>
  <name>RDimensionEntity</name></super>
  <block>{
  <private type="default">
    <macro>
      <name>Q_DECLARE_TR_FUNCTIONS</name>
      <argument_list>(
      <argument>RDimOrdinateEntity</argument>)</argument_list>
    </macro>
  </private>
  <public>public: 
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyCustom</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyHandle</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyType</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyBlock</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLayer</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLinetype</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLineweight</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyColor</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyDrawOrder</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyMiddleOfTextX</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyMiddleOfTextY</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyMiddleOfTextZ</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyText</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyUpperTolerance</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLowerTolerance</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyOriginX</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyOriginY</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyOriginZ</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyOrdinate</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLeaderEndPointX</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLeaderEndPointY</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyLeaderEndPointZ</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyDefiningPointX</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyDefiningPointY</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>RPropertyTypeId</name>
    </type>
    <name>PropertyDefiningPointZ</name>
  </decl>;</decl_stmt></public>
  <public>public: 
  <constructor_decl>
  <name>RDimOrdinateEntity</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RDocument</name>*</type>
      <name>document</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RDimOrdinateData</name>&amp;</type>
      <name>data</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>
      <name>RObject</name>::
      <name>Id</name></name>
    </type>
    <name>objectId</name>=
    <init>
      <expr>
        <name>
        <name>RObject</name>::
        <name>INVALID_ID</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RDimOrdinateEntity</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>void</name>
  </type>
  <name>init</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function>
    <type>
    <name>virtual</name>
    <name>RDimOrdinateEntity</name>*</type>
    <name>clone</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>new 
    <call>
      <name>RDimOrdinateEntity</name>
      <argument_list>(
      <argument>
        <expr>*
        <name>this</name></expr>
      </argument>)</argument_list>
    </call></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </type>
    <name>getType</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>
      <name>RS</name>::
      <name>EntityDimOrdinate</name></name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>setProperty</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>RPropertyTypeId</name>
      </type>
      <name>propertyTypeId</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QVariant</name>&amp;</type>
      <name>value</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QPair
    <argument_list>&lt;
    <argument>
      <name>QVariant</name>
    </argument>, 
    <argument>
      <name>RPropertyAttributes</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getProperty</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
        <name>RPropertyTypeId</name>
      </type>
      <name>propertyTypeId</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>humanReadable</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>noAttributes</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function>
    <type>
    <name>virtual</name>
    <name>RDimOrdinateData</name>&amp;</type>
    <name>getData</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <name>data</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setData</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>RDimOrdinateData</name>&amp;</type>
        <name>d</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>data</name>= 
    <name>d</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
    <name>virtual</name>
    <name>const</name>
    <name>RDimOrdinateData</name>&amp;</type>
    <name>getData</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>data</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setLeaderEndPoint</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>p</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>data</name>.
    <call>
      <name>setLeaderEndPoint</name>
      <argument_list>(
      <argument>
        <expr>
          <name>p</name>
        </expr>
      </argument>)</argument_list>
    </call></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getLeaderEndPoint</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
    <name>data</name>.
    <call>
      <name>getLeaderEndPoint</name>
      <argument_list>()</argument_list>
    </call></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setDefiningPoint</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>p</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>data</name>.
    <call>
      <name>setDefiningPoint</name>
      <argument_list>(
      <argument>
        <expr>
          <name>p</name>
        </expr>
      </argument>)</argument_list>
    </call></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getDefiningPoint</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
    <name>data</name>.
    <call>
      <name>getDefiningPoint</name>
      <argument_list>()</argument_list>
    </call></expr>;</return>}</block>
  </function></public>
  <protected>protected: 
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>print</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl></protected>
  <protected>protected: 
  <decl_stmt>
  <decl>
    <type>
      <name>RDimOrdinateData</name>
    </type>
    <name>data</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RDimOrdinateEntity*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RDimOrdinateEntity&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RDimOrdinateEntity&gt;*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
