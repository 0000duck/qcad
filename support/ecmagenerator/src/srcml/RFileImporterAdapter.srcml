<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RFileImporterAdapter.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RFILEIMPORTERADAPTER_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RFILEIMPORTERADAPTER_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RFileImporter.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RMessageHandler.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RProgressHandler.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>RDocument</name>;</class_decl>
  <comment type="block">/** * \brief Base class for file importers.
  * * File importers import files of a specific format into an \ref
  RDocument. * * \ingroup core * \scriptable * \generateScriptShell
  */</comment>
  <class>class 
  <name>RFileImporterAdapter</name>
  <super>: 
  <specifier>public</specifier>
  <name>RFileImporter</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor>
    <name>RFileImporterAdapter</name>
    <parameter_list>()</parameter_list>
    <member_list>: 
    <call>
      <name>RFileImporter</name>
      <argument_list>()</argument_list>
    </call></member_list>
    <block>{}</block>
  </constructor>
  <constructor>
    <name>RFileImporterAdapter</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>RDocument</name>&amp;</type>
        <name>document</name>
      </decl>
    </param>, 
    <param>
      <decl>
      <type>
      <name>RMessageHandler</name>*</type>
      <name>messageHandler</name>=
      <init>
        <expr>
          <name>NULL</name>
        </expr>
      </init></decl>
    </param>, 
    <param>
      <decl>
      <type>
      <name>RProgressHandler</name>*</type>
      <name>progressHandler</name>=
      <init>
        <expr>
          <name>NULL</name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <member_list>: 
    <call>
      <name>RFileImporter</name>
      <argument_list>(
      <argument>
        <expr>
          <name>document</name>
        </expr>
      </argument>, 
      <argument>
        <expr>
          <name>messageHandler</name>
        </expr>
      </argument>, 
      <argument>
        <expr>
          <name>progressHandler</name>
        </expr>
      </argument>)</argument_list>
    </call></member_list>
    <block>{}</block>
  </constructor>
  <destructor>
    <specifier>virtual</specifier>
    <name>~RFileImporterAdapter</name>
    <parameter_list>()</parameter_list>
    <block>{}</block>
  </destructor>
  <function>
    <type>
      <name>virtual</name>
      <name>bool</name>
    </type>
    <name>importFile</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>fileName</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <macro>
      <name>Q_UNUSED</name>
      <argument_list>(
      <argument>fileName</argument>)</argument_list>
    </macro>
    <return>return 
    <expr>
      <name>false</name>
    </expr>;</return>}</block>
  </function>
  <comment type="block">/** * Must be implemented by script file
  importers to check if the given file can * be imported by this
  importer. */</comment>
  <function>
    <type>
      <name>virtual</name>
      <name>bool</name>
    </type>
    <name>canImport</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>fileName</name>
      </decl>
    </param>, 
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>nameFilter</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <macro>
      <name>Q_UNUSED</name>
      <argument_list>(
      <argument>fileName</argument>)</argument_list>
    </macro>
    <macro>
      <name>Q_UNUSED</name>
      <argument_list>(
      <argument>nameFilter</argument>)</argument_list>
    </macro>
    <return>return 
    <expr>
      <name>false</name>
    </expr>;</return>}</block>
  </function></public>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RFileImporterAdapter*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
