<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RTransactionEvent.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RTRANSACTIONEVENT_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RTRANSACTIONEVENT_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QEvent&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RS.h"</cpp:file></cpp:include>
  <comment type="block">/** * \brief Event that is posted whenever
  a transaction happened. * * \ingroup core * \scriptable
  */</comment>
  <class>class 
  <name>RTransactionEvent</name>
  <super>: 
  <specifier>public</specifier>
  <name>QEvent</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor>
    <name>RTransactionEvent</name>
    <parameter_list>(
    <param>
      <decl>
      <type>
        <name>bool</name>
      </type>
      <name>onlyChanges</name>=
      <init>
        <expr>
          <name>false</name>
        </expr>
      </init></decl>
    </param>, 
    <param>
      <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>EntityType</name></name>
      </type>
      <name>entityTypeFilter</name>=
      <init>
        <expr>
          <name>
          <name>RS</name>::
          <name>EntityAll</name></name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <member_list>: 
    <call>
      <name>QEvent</name>
      <argument_list>(
      <argument>
        <expr>
          <name>
          <name>QEvent</name>::
          <name>User</name></name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>onlyChanges</name>
      <argument_list>(
      <argument>
        <expr>
          <name>onlyChanges</name>
        </expr>
      </argument>)</argument_list>
    </call>, 
    <call>
      <name>entityTypeFilter</name>
      <argument_list>(
      <argument>
        <expr>
          <name>entityTypeFilter</name>
        </expr>
      </argument>)</argument_list>
    </call></member_list>
    <block>{}</block>
  </constructor>
  <destructor>
    <specifier>virtual</specifier>
    <name>~RTransactionEvent</name>
    <parameter_list>()</parameter_list>
    <block>{}</block>
  </destructor>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>hasOnlyChanges</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <name>onlyChanges</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </type>
    <name>getEntityTypeFilter</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>entityTypeFilter</name>
    </expr>;</return>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>onlyChanges</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>EntityType</name></name>
    </type>
    <name>entityTypeFilter</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RTransactionEvent*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
