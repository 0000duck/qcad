<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core/math" filename="RRefPoint.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RREFPOINT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RREFPOINT_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFlags&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QList&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<comment type="block">/**
 * Represents a reference point of an entity.
 *
 * \ingroup math
 * \scriptable
 * \copyable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RRefPoint</name> <super>: <specifier>public</specifier> <name>RVector</name></super> <block>{<private type="default">
</private><public>public:
    <enum>enum <name>Flag</name> <block>{
        <expr><name>NoFlags</name> = 0x000</expr>,
        <expr><name>Secondary</name> = 0x001</expr>,
    }</block>;</enum>
    <macro><name>Q_DECLARE_FLAGS</name><argument_list>(<argument>Flags</argument>, <argument>Flag</argument>)</argument_list></macro>

    <function><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>toVectorList</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RRefPoint</name></argument>&gt;</argument_list></name>&amp;</type> <name>list</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
        <for>for (<init><expr><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></expr>;</init> <condition><expr><name>i</name>&lt;<name>list</name>.<call><name>length</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ret</name>.<call><name>append</name><argument_list>(<argument><expr><name>list</name>.<call><name>at</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <function><type><name>static</name> <name>QList<argument_list>&lt;<argument><name>RRefPoint</name></argument>&gt;</argument_list></name></type> <name>toRefPointList</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name>&amp;</type> <name>list</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RRefPoint</name></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
        <for>for (<init><expr><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></expr>;</init> <condition><expr><name>i</name>&lt;<name>list</name>.<call><name>length</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ret</name>.<call><name>append</name><argument_list>(<argument><expr><name>list</name>.<call><name>at</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <constructor><name>RRefPoint</name><parameter_list>()</parameter_list> <member_list>: <call><name>RVector</name><argument_list>()</argument_list></call> </member_list><block>{}</block></constructor>
    <constructor><name>RRefPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>, <param><decl><type><name><name>RRefPoint</name>::<name>Flags</name></name></type> <name>f</name></decl></param>)</parameter_list> <member_list>: <call><name>RVector</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>, <call><name>flags</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>
    <constructor><name>RRefPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <member_list>: <call><name>RVector</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>
    <constructor><name>RRefPoint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>vx</name></decl></param>, <param><decl><type><name>double</name></type> <name>vy</name></decl></param>, <param><decl><type><name>double</name></type> <name>vz</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>valid_in</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <member_list>: <call><name>RVector</name><argument_list>(<argument><expr><name>vx</name></expr></argument>, <argument><expr><name>vy</name></expr></argument>, <argument><expr><name>vz</name></expr></argument>, <argument><expr><name>valid_in</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>

    <function><type><name>void</name></type> <name>setFlag</name><parameter_list>(<param><decl><type><name><name>RRefPoint</name>::<name>Flag</name></name></type> <name>flag</name></decl></param>, <param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>on</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flags</name> |= <name>flag</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>flags</name> &amp;= ~<name>flag</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><name>bool</name></type> <name>getFlag</name><parameter_list>(<param><decl><type><name><name>RRefPoint</name>::<name>Flag</name></name></type> <name>flag</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>(<name>flags</name> &amp; <name>flags</name>) == <name>flag</name></expr>;</return>
    }</block></function>

    <function><type><name><name>RRefPoint</name>::<name>Flags</name></name></type> <name>getFlags</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>flags</name></expr>;</return>
    }</block></function>

</public><private>private:
    <decl_stmt><decl><type><name>Flags</name></type> <name>flags</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;RRefPoint&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;RRefPoint&gt;*</argument>)</argument_list></macro>
<typedef>typedef <type><name>QMultiMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>RRefPoint</name></argument>&gt;</argument_list></name></type> <name>_RMapIntRefPoint</name>;</typedef>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>_RMapIntRefPoint*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RRefPoint</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RRefPoint*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>const RRefPoint*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RRefPoint::Flag</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RRefPoint::Flag*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QFlags&lt;RRefPoint::Flag&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QFlags&lt;RRefPoint::Flag&gt;*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
