<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RPainterPathDevice.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RPAINTERPATHDEVICE_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RPAINTERPATHDEVICE_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QPaintDevice&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RPainterPathEngine.h"</cpp:file></cpp:include>
  <comment type="block">/** * Paint device that produces painter
  paths as output. * * \scriptable * \ingroup core */</comment>
  <class>class 
  <name>RPainterPathDevice</name>
  <super>: 
  <specifier>public</specifier>
  <name>QPaintDevice</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor_decl>
  <name>RPainterPathDevice</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RPainterPathDevice</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RPainterPath</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getPainterPaths</name>
  <parameter_list>()</parameter_list>;</function_decl></public>
  <protected>protected: 
  <function_decl>
  <type>
  <name>QPaintEngine</name>*</type>
  <name>paintEngine</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>int</name>
  </type>
  <name>metric</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>PaintDeviceMetric</name>
      </type>
      <name>metric</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl></protected>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
    <name>RPainterPathEngine</name>*</type>
    <name>engine</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RPainterPathDevice*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
