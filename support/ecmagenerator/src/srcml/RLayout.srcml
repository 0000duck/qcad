<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RLayout.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RLAYOUT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RLAYOUT_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDebug&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RGlobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPropertyTypeId.h"</cpp:file></cpp:include>

<class_decl>class <name>RDocument</name>;</class_decl>
<class_decl>class <name>RTransaction</name>;</class_decl>

<comment type="block">/**
 * Represents a layout definition in a drawing.
 *
 * \ingroup core
 * \scriptable
 * \sharedPointerSupport
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RLayout</name><super>: <specifier>public</specifier> <name>RObject</name></super> <block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyCustom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyTabOrder</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMinLimitsX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMinLimitsY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMinLimitsZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMaxLimitsX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMaxLimitsY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMaxLimitsZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyInsertionBaseX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyInsertionBaseY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyInsertionBaseZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMinExtentsX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMinExtentsY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMinExtentsZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMaxExtentsX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMaxExtentsY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyMaxExtentsZ</name></decl>;</decl_stmt>

<comment type="line">//    static RPropertyTypeId PropertyPlotPaperMarginLeftMM;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotPaperMarginBottomMM;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotPaperMarginRightMM;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotPaperMarginTopMM;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotPaperSizeWidth;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotPaperSizeHeight;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotOriginX;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotOriginY;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotWindowAreaMinX;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotWindowAreaMinY;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotWindowAreaMaxX;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotWindowAreaMaxY;</comment>
<comment type="line">//    static RPropertyTypeId PropertyNumeratorCustomScale;</comment>
<comment type="line">//    static RPropertyTypeId PropertyDenominatorCustomScale;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotPaperUnits;</comment>
<comment type="line">//    static RPropertyTypeId PropertyPlotRotation;</comment>

    <enum>enum <name>PlotPaperUnits</name>
    <block>{
      <expr><name>Inches</name>         = 0</expr>,   <comment type="line">// Inches</comment>
      <expr><name>Millimeters</name>    = 1</expr>,   <comment type="line">// Millimeters</comment>
      <expr><name>Pixels</name>         = 2</expr>    <comment type="line">// Pixels</comment>
    }</block>;</enum>

    <enum>enum <name>PlotRotation</name>
    <block>{
      <expr><name>Zero</name>              = 0</expr>,   <comment type="line">// No rotation (0)</comment>
      <expr><name>CounterClockWise</name>  = 1</expr>,   <comment type="line">// 90 CCW      (90)</comment>
      <expr><name>Inverted</name>          = 2</expr>,   <comment type="line">// Inverted    (180)</comment>
      <expr><name>ClockWise</name>         = 3</expr>    <comment type="line">// 90 CW       (270)</comment>
    }</block>;</enum>

</public><public>public:
    <constructor_decl><name>RLayout</name><parameter_list>()</parameter_list>;</constructor_decl>

    <constructor_decl><name>RLayout</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>name</name></decl></param>)</parameter_list>;</constructor_decl>

    <destructor_decl><specifier>virtual</specifier> <name>~RLayout</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>static</name> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name><name>RS</name>::<name>EntityType</name></name></type> <name>getType</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RS</name>::<name>ObjectLayout</name></name></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>RLayout</name>*</type> <name>clone</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>QString</name></type> <name>getName</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>int</name></type> <name>getTabOrder</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>tabOrder</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setTabOrder</name><parameter_list>(<param><decl><type><name>int</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>tabOrder</name> = <name>to</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setMinLimits</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>minLimits</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>this</name>-&gt;<name>minLimits</name> = <name>minLimits</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getMinLimits</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>minLimits</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setMaxLimits</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>maxLimits</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>this</name>-&gt;<name>maxLimits</name> = <name>maxLimits</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getMaxLimits</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>maxLimits</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setInsertionBase</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>insertionBase</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>this</name>-&gt;<name>insertionBase</name> = <name>insertionBase</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getInsertionBase</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>insertionBase</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setMinExtents</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>minExtents</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>this</name>-&gt;<name>minExtents</name> = <name>minExtents</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getMinExtents</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>minExtents</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setMaxExtents</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>maxExtents</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>this</name>-&gt;<name>maxExtents</name> = <name>maxExtents</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getMaxExtents</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>maxExtents</name></expr>;</return>
    }</block></function>

<comment type="line">//    void setPlotPaperMarginLeftMM(double v) {</comment>
<comment type="line">//        plotPaperMarginLeftMM = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPlotPaperMarginBottomMM(double v) {</comment>
<comment type="line">//        plotPaperMarginBottomMM = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPlotPaperMarginRightMM(double v) {</comment>
<comment type="line">//        plotPaperMarginRightMM = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPlotPaperMarginTopMM(double v) {</comment>
<comment type="line">//        plotPaperMarginTopMM = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPlotPaperSize(const RVector&amp; v) {</comment>
<comment type="line">//        plotPaperSize = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPlotOrigin(const RVector&amp; v) {</comment>
<comment type="line">//        plotOrigin = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPlotWindowAreaMin(const RVector&amp; v) {</comment>
<comment type="line">//        plotWindowAreaMin = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPlotWindowAreaMax(const RVector&amp; v) {</comment>
<comment type="line">//        plotWindowAreaMax = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setNumeratorCustomScale(double v) {</comment>
<comment type="line">//        numeratorCustomScale = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setDenominatorCustomScale(double v) {</comment>
<comment type="line">//        denominatorCustomScale = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPlotPaperUnits(RLayout::PlotPaperUnits v) {</comment>
<comment type="line">//        plotPaperUnits = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPlotRotation(RLayout::PlotRotation v) {</comment>
<comment type="line">//        plotRotation = v;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    double getPlotPaperMarginLeftMM() const {</comment>
<comment type="line">//        return plotPaperMarginLeftMM;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    double getPlotPaperMarginBottomMM() const {</comment>
<comment type="line">//        return plotPaperMarginBottomMM;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    double getPlotPaperMarginRightMM() const {</comment>
<comment type="line">//        return plotPaperMarginRightMM;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    double getPlotPaperMarginTopMM() const {</comment>
<comment type="line">//        return plotPaperMarginTopMM;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RVector getPlotPaperSize() const {</comment>
<comment type="line">//        return plotPaperSize;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RVector getPlotOrigin() const {</comment>
<comment type="line">//        return plotOrigin;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RVector getPlotWindowAreaMin() const {</comment>
<comment type="line">//        return plotWindowAreaMin;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RVector getPlotWindowAreaMax() const {</comment>
<comment type="line">//        return plotWindowAreaMax;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    double getNumeratorCustomScale() const {</comment>
<comment type="line">//        return numeratorCustomScale;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    double getDenominatorCustomScale() const {</comment>
<comment type="line">//        return denominatorCustomScale;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RLayout::PlotPaperUnits getPlotPaperUnits() const {</comment>
<comment type="line">//        return plotPaperUnits;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RLayout::PlotRotation getPlotRotation() const {</comment>
<comment type="line">//        return plotRotation;</comment>
<comment type="line">//    }</comment>

    <function_decl><type><name>virtual</name> <name>QPair<argument_list>&lt;<argument><name>QVariant</name></argument>, <argument><name>RPropertyAttributes</name></argument>&gt;</argument_list></name></type> <name>getProperty</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name>&amp;</type> <name>propertyTypeId</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>humanReadable</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>noAttributes</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl></param>,
            <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>value</name></decl></param>, <param><decl><type><name>RTransaction</name>*</type> <name>transaction</name>=<init><expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isSelectedForPropertyEditing</name><parameter_list>()</parameter_list>;</function_decl>

</public><protected>protected:
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>print</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</protected><private>private:
    <decl_stmt><decl><type><name>QString</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tabOrder</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RVector</name></type> <name>minLimits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>maxLimits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>insertionBase</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>minExtents</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>maxExtents</name></decl>;</decl_stmt>

    <comment type="line">// TODO: split into base class 'RPlotSettings':</comment>
<comment type="line">//    double plotPaperMarginLeftMM;</comment>
<comment type="line">//    double plotPaperMarginBottomMM;</comment>
<comment type="line">//    double plotPaperMarginRightMM;</comment>
<comment type="line">//    double plotPaperMarginTopMM;</comment>
<comment type="line">//    RVector plotPaperSize;</comment>
<comment type="line">//    RVector plotOrigin;</comment>
<comment type="line">//    RVector plotWindowAreaMin;</comment>
<comment type="line">//    RVector plotWindowAreaMax;</comment>
<comment type="line">//    double numeratorCustomScale;</comment>
<comment type="line">//    double denominatorCustomScale;</comment>
<comment type="line">//    PlotPaperUnits plotPaperUnits;</comment>
<comment type="line">//    PlotRotation plotRotation;</comment>
</private>}</block>;</class>


<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RLayout&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RLayout&gt;*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLayout</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLayout*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLayout::PlotPaperUnits</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLayout::PlotPaperUnits*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLayout::PlotRotation</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RLayout::PlotRotation*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
