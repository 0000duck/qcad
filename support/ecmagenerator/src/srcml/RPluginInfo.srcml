<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RPluginInfo.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RPLUGININFO_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RPLUGININFO_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QMetaType&gt;</cpp:file></cpp:include>
  <comment type="block">/** * Information about a plugin. Ususally
  shown in an about dialog. * * \ingroup core * \scriptable *
  \copyable */</comment>
  <class>class 
  <name>RPluginInfo</name>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor>
    <name>RPluginInfo</name>
    <parameter_list>()</parameter_list>
    <block>{}</block>
  </constructor>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getFileName</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>fileName</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setFileName</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>fn</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>fileName</name>= 
    <name>fn</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getAboutString</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>aboutString</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setAboutString</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>s</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>aboutString</name>= 
    <name>s</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getVersionString</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>versionString</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setVersionString</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>vs</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>versionString</name>= 
    <name>vs</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getErrorString</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>errorString</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setErrorString</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>es</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>errorString</name>= 
    <name>es</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getLicense</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>license</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setLicense</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>l</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>license</name>= 
    <name>l</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getUrl</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>url</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setUrl</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>u</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>url</name>= 
    <name>u</name></expr>;</expr_stmt>}</block>
  </function></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>fileName</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>aboutString</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>versionString</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>errorString</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>license</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>url</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RPluginInfo</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RPluginInfo*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
