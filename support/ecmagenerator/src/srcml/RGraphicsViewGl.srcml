<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./gui" filename="RGraphicsViewGl.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RGRAPHICSVIEWGL_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RGRAPHICSVIEWGL_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QGLWidget&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RGraphicsView.h"</cpp:file></cpp:include>
  <class_decl>class 
  <name>QGLPixelBuffer</name>;</class_decl>
  <class_decl>class 
  <name>RAction</name>;</class_decl>
  <class_decl>class 
  <name>RDocument</name>;</class_decl>
  <class_decl>class 
  <name>RDocumentInterface</name>;</class_decl>
  <class_decl>class 
  <name>RGraphicsSceneQt</name>;</class_decl>
  <class_decl>class 
  <name>RLine</name>;</class_decl>
  <comment type="block">/** * \brief OpenGL 2d or 3d graphics view.
  * * An OpenGL graphics view displays a rectangular area of an *
  \ref RGraphicsSceneGl "OpenGL graphics scene". * * \ingroup
  qcadguiqt * * \scriptable */</comment>
  <class>class 
  <name>RGraphicsViewGl</name>
  <super>: 
  <specifier>public</specifier>
  <name>QGLWidget</name>, 
  <specifier>public</specifier>
  <name>RGraphicsView</name></super>
  <block>{
  <private type="default">
    <macro>
      <name>Q_OBJECT</name>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>RGraphicsViewGl</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
    <name>QWidget</name>*</type>
    <name>parent</name>=
    <init>
      <expr>
        <name>NULL</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RGraphicsViewGl</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setScene</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RGraphicsSceneQt</name>*</type>
      <name>scene</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>regenerate</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>force</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>repaintView</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">// void makeMainCurrent();</comment>
  <comment type="line">// void makePreviewCurrent();</comment>
  <comment type="line">// void invalidate();</comment>
  <function>
    <type>
      <name>virtual</name>
      <name>bool</name>
    </type>
    <name>hasFocus</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>
        <name>QWidget</name>::
        <name>hasFocus</name></name>
        <argument_list>()</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>removeFocus</name>
    <parameter_list>()</parameter_list>
    <block>{}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>mapFromView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>v</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>double</name>
    </type>
    <name>z</name>=
    <init>
      <expr>0.0</expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>mapToView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>v</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>mapDistanceFromView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>d</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>mapDistanceToView</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>d</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>int</name>
  </type>
  <name>getWidth</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>int</name>
  </type>
  <name>getHeight</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setCursor</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>Qt</name>::
        <name>CursorShape</name></name>
      </type>
      <name>cursorShape</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>setCursor</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QCursor</name>&amp;</type>
      <name>cursor</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>callReferencePoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>screenPosition</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>highlighted</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>paintGridPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>ucsPosition</name>
    </decl>
  </param>)</parameter_list>;</function_decl></public>
  <public>public slots: 
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>slotReset</name>
  <parameter_list>()</parameter_list>;</function_decl></public>
  <protected>protected: 
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>initializeGL</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>resizeGL</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>width</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>height</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>paintGL</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>focusInEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QFocusEvent</name>*</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>focusOutEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QFocusEvent</name>*</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="line">//virtual void resizeEvent(QResizeEvent*
  event);</comment>
  <comment type="line">//virtual void paintEvent(QPaintEvent*
  event);</comment>
  <comment type="line">// void updateMainBuffer();</comment>
  <comment type="line">// void paintMainBuffer();</comment>
  <comment type="line">// void paintPreviewBuffer();</comment>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>callGrid</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>callZero</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>callCursor</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>callReferencePoints</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <comment type="line">// virtual void setupViewport()
  const;</comment>
  <comment type="line">// virtual void
  setupScreenViewport();</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>keyPressEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QKeyEvent</name>*</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>keyReleaseEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QKeyEvent</name>*</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>mouseMoveEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QMouseEvent</name>*</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>mousePressEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QMouseEvent</name>*</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>mouseReleaseEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QMouseEvent</name>*</type>
      <name>event</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>wheelEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QWheelEvent</name>*</type>
      <name>e</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>tabletEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QTabletEvent</name>*</type>
      <name>e</name>
    </decl>
  </param>)</parameter_list>;</function_decl></protected>
  <protected>protected: 
  <comment type="line">// QImage buffer;</comment>
  <comment type="line">// QGLPixelBuffer* mainBuffer;</comment>
  <comment type="line">// QGLPixelBuffer* previewBuffer;</comment>
  <decl_stmt>
  <decl>
    <type>
    <name>RGraphicsSceneQt</name>*</type>
    <name>sceneQt</name>
  </decl>;</decl_stmt>
  <comment type="line">// bool graphicsBufferNeedsUpdate;</comment>
  <comment type="line">//! remember last mouse button state for
  wacom bug workaround</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>
      <name>Qt</name>::
      <name>MouseButtons</name></name>
    </type>
    <name>lastButtonState</name>
  </decl>;</decl_stmt></protected>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RGraphicsViewGl*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
