<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RDxfServices.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RDXFSERVICES_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDXFSERVICES_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"dxf_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RS.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RColor.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RLineweight.h"</cpp:file></cpp:include>
  <comment type="block">/** * \brief DXF support tools, mainly for
  QCAD 2 DXF imports. * * \ingroup qcadcore * \scriptable *
  \copyable */</comment>
  <class>class 
  <macro>
    <name>QCADCORE_EXPORT</name>
  </macro>
  <name>RDxfServices</name>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor_decl>
  <name>RDxfServices</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>reset</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>fixBlockName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QString</name>&amp;</type>
      <name>blockName</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>fixLayerName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QString</name>&amp;</type>
      <name>layerName</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>fixFontName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>fontName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>fixQCad2String</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QString</name>&amp;</type>
      <name>str</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>fixDimensionLabel</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QString</name>&amp;</type>
      <name>text</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>QString</name>&amp;</type>
      <name>uTol</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>QString</name>&amp;</type>
      <name>lTol</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>detectQCad2Format</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>fileName</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>hasDIMZIN</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>qcad2GotDIMZIN</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>hasDIMAZIN</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>qcad2GotDIMAZIN</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>hasInvalidEllipse</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>qcad2GotInvalidEllipse</name>
    </expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>getQCad2Compatibility</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>qcad2Compatibility</name>
    </expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getQCad2LayerName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>layerName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getQCad2BlockName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>blockName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getQCad2Font</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>handle</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getQCad2DimensionLabel</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>handle</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>collectQCad2Info</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>fileName</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getQCad2PatternAngle</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>angle</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>patternName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getQCad2PatternScale</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>scale</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>patternName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QString</name>
  </type>
  <name>getQCad2PatternName</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>patternName</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>fixQCad2HatchData</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QString</name>&amp;</type>
      <name>patternName</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>double</name>&amp;</type>
      <name>angle</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>double</name>&amp;</type>
      <name>scale</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>solid</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>RColor</name>
  </type>
  <name>attributesToColor</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>color</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>color24</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>forLayer</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * \nonscriptable */</comment>
  <function_decl>
  <type>
    <name>static</name>
    <name>RColor</name>
  </type>
  <name>numberToColor</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>num</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>const</name>
        <name>double</name>
      </type>
      <name>
        <name>dxfColors</name>
        <index>[]</index>
        <index>[
        <expr>3</expr>]</index>
      </name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>comp</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>forLayer</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>RColor</name>
  </type>
  <name>numberToColor24</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>num</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>
    <name>RLineweight</name>::
    <name>Lineweight</name></name>
  </type>
  <name>numberToWeight</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>num</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>int</name>
  </type>
  <name>widthToNumber</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RLineweight</name>::
        <name>Lineweight</name></name>
      </type>
      <name>w</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>int</name>
  </type>
  <name>colorToNumber24</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RColor</name>&amp;</type>
      <name>col</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * \nonscriptable */</comment>
  <function_decl>
  <type>
    <name>static</name>
    <name>int</name>
  </type>
  <name>colorToNumber</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RColor</name>&amp;</type>
      <name>col</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>const</name>
        <name>double</name>
      </type>
      <name>
        <name>dxfColors</name>
        <index>[]</index>
        <index>[
        <expr>3</expr>]</index>
      </name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>
    <name>RS</name>::
    <name>KnownVariable</name></name>
  </type>
  <name>stringToVariable</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QString</name>&amp;</type>
      <name>s</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>QString</name>
  </type>
  <name>variableToString</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>
        <name>RS</name>::
        <name>KnownVariable</name></name>
      </type>
      <name>v</name>
    </decl>
  </param>)</parameter_list>;</function_decl></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>qcad2GotDIMZIN</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>qcad2GotDIMAZIN</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>qcad2GotInvalidEllipse</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>qcad2Compatibility</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QMap
      <argument_list>&lt;
      <argument>
        <name>QString</name>
      </argument>, 
      <argument>
        <name>QString</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>qcad2BlockMapping</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QMap
      <argument_list>&lt;
      <argument>
        <name>QString</name>
      </argument>, 
      <argument>
        <name>QString</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>qcad2LayerMapping</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QMap
      <argument_list>&lt;
      <argument>
        <name>QString</name>
      </argument>, 
      <argument>
        <name>QString</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>qcad2TextFonts</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QMap
      <argument_list>&lt;
      <argument>
        <name>QString</name>
      </argument>, 
      <argument>
        <name>QString</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>qcad2DimensionLabels</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RDxfServices</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RDxfServices*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
