<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core/math" filename="RDirected.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RDIRECTED_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDIRECTED_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QSharedPointer&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RShape.h"</cpp:file></cpp:include>
  <comment type="block">/** * Interface for directed shape classes.
  * * \ingroup math * \scriptable * \sharedPointerSupport
  */</comment>
  <class>class 
  <name>RDirected</name>
  <block>{
  <private type="default"></private>
  <public>public: 
  <destructor>
    <specifier>virtual</specifier>
    <name>~RDirected</name>
    <parameter_list>()</parameter_list>
    <block>{}</block>
  </destructor>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>getDirection1</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>getDirection2</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getStartPoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getEndPoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>reverse</name>
  <parameter_list>()</parameter_list>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>trimStartPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p</name>
    </decl>
  </param>)</parameter_list>
  <specifier>= 0</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>trimEndPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p</name>
    </decl>
  </param>)</parameter_list>
  <specifier>= 0</specifier>;</function_decl>
  <comment type="block">/** * \param coord Clicked coordiante *
  \param trimPoint Trim start point or end point to this
  coordiante. */</comment>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>
    <name>RS</name>::
    <name>Ending</name></name>
  </type>
  <name>getTrimEnd</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>coord</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>trimPoint</name>
    </decl>
  </param>)</parameter_list>
  <specifier>= 0</specifier>;</function_decl>
  <comment type="block">/** * \return Distance of given point to
  start point of shape along shape. * \param p Point (assumed to be
  on shape). */</comment>
  <function>
    <type>
      <name>virtual</name>
      <name>double</name>
    </type>
    <name>getDistanceFromStart</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>p</name>
      </decl>
    </param>)</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <macro>
      <name>Q_UNUSED</name>
      <argument_list>(
      <argument>p</argument>)</argument_list>
    </macro>
    <return>return 
    <expr>
      <name>RMAXDOUBLE</name>
    </expr>;</return>}</block>
  </function></public>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RDirected*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const RDirected*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RDirected&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RDirected&gt;*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
