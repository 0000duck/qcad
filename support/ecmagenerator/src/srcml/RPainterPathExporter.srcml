<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RPainterPathExporter.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RPAINTERPATHEXPORTER_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RPAINTERPATHEXPORTER_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RExporter.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RPainterPath.h"</cpp:file></cpp:include>
  <class>class 
  <name>RPainterPathExporter</name>
  <super>: 
  <specifier>public</specifier>
  <name>RExporter</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>exportLineSegment</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RLine</name>&amp;</type>
      <name>line</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>exportPoint</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RPoint</name>&amp;</type>
        <name>point</name>
      </decl>
    </param>)</parameter_list>
    <block>{}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>exportArcSegment</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RArc</name>&amp;</type>
        <name>arc</name>
      </decl>
    </param>)</parameter_list>
    <block>{}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>exportTriangle</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RTriangle</name>&amp;</type>
        <name>triangle</name>
      </decl>
    </param>)</parameter_list>
    <block>{}</block>
  </function>
  <function_decl>
  <type>
    <name>RPainterPath</name>
  </type>
  <name>getPainterPath</name>
  <parameter_list>()</parameter_list>;</function_decl></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>RPainterPath</name>
    </type>
    <name>path</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
