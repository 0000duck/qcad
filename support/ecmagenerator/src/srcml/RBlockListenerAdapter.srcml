<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core" filename="RBlockListenerAdapter.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RBLOCKLISTENERADAPTER_H_</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RBLOCKLISTENERADAPTER_H_</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QObject&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDocumentInterface.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RVector.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RBlockListener.h"</cpp:file></cpp:include>
  <comment type="block">/** * This block listener adapter emits
  signals on block events. * Used to simplify listening to block
  events from QObjects, * for instance from an ECMA script. * *
  \scriptable */</comment>
  <class>class 
  <name>RBlockListenerAdapter</name>
  <super>: 
  <specifier>public</specifier>
  <name>QObject</name>, 
  <specifier>public</specifier>
  <name>RBlockListener</name></super>
  <block>{
  <private type="default">
    <macro>
      <name>Q_OBJECT</name>
    </macro>
  </private>
  <public>public: 
  <constructor>
    <name>RBlockListenerAdapter</name>
    <parameter_list>(
    <param>
      <decl>
      <type>
      <name>QObject</name>*</type>
      <name>parent</name>=
      <init>
        <expr>
          <name>NULL</name>
        </expr>
      </init></decl>
    </param>)</parameter_list>
    <member_list>: 
    <call>
      <name>QObject</name>
      <argument_list>(
      <argument>
        <expr>
          <name>parent</name>
        </expr>
      </argument>)</argument_list>
    </call></member_list>
    <block>{ }</block>
  </constructor>
  <destructor>
    <specifier>virtual</specifier>
    <name>~RBlockListenerAdapter</name>
    <parameter_list>()</parameter_list>
    <block>{ }</block>
  </destructor>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>updateBlocks</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>RDocumentInterface</name>*</type>
        <name>documentInterface</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <function_decl>
    <type>
      <name>emit</name>
    </type>
    <name>blocksUpdated</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>documentInterface</name>
        </type>
      </decl>
    </param>)</parameter_list>;</function_decl>}</block>
  </function>
  <function>
    <type>
      <name>virtual</name>
      <name>void</name>
    </type>
    <name>clearBlocks</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <function_decl>
    <type>
      <name>emit</name>
    </type>
    <name>blocksCleared</name>
    <parameter_list>()</parameter_list>;</function_decl>}</block>
  </function>
  <label>
  <name>signals</name>:</label>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>blocksUpdated</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RDocumentInterface</name>*</type>
      <name>documentInterface</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>blocksCleared</name>
  <parameter_list>
  ()</parameter_list>;</function_decl></public>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RBlockListenerAdapter*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
