<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./operations" filename="RPasteOperation.h">
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RPASTEOPERATION_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RPASTEOPERATION_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDocument.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"REntity.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RExporter.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RClipboardOperation.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RVector.h"</cpp:file></cpp:include>
  <comment type="block">/** * Implementation of an operation that
  pastes the clipboard * at a given reference point. * * \ingroup
  operations * \scriptable */</comment>
  <class>class 
  <name>RPasteOperation</name>
  <super>: 
  <specifier>public</specifier>
  <name>RClipboardOperation</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <constructor_decl>
  <name>RPasteOperation</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RDocument</name>&amp;</type>
      <name>sourceDocument</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor>
    <specifier>virtual</specifier>
    <name>~RPasteOperation</name>
    <parameter_list>()</parameter_list>
    <block>{ }</block>
  </destructor>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setOffset</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>RVector</name>&amp;</type>
        <name>offset</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>offset</name>= 
    <name>offset</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>RVector</name>
    </type>
    <name>getOffset</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>offset</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setScale</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>scale</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>scale</name>= 
    <name>scale</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getScale</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>scale</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setRotation</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>double</name>
        </type>
        <name>rotation</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>rotation</name>= 
    <name>rotation</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>double</name>
    </type>
    <name>getRotation</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>rotation</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setFlipHorizontal</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>flipHorizontal</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>flipHorizontal</name>= 
    <name>flipHorizontal</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>getFlipHorizontal</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>flipHorizontal</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setFlipVertical</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>flipVertical</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>flipVertical</name>= 
    <name>flipVertical</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>getFlipVertical</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>flipVertical</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setToCurrentLayer</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>toCurrentLayer</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>toCurrentLayer</name>= 
    <name>toCurrentLayer</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>getToCurrentLayer</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>toCurrentLayer</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setOverwriteLayers</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>overwriteLayers</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>overwriteLayers</name>= 
    <name>overwriteLayers</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>getOverwriteLayers</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>overwriteLayers</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setOverwriteBlocks</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>bool</name>
        </type>
        <name>overwriteBlocks</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>overwriteBlocks</name>= 
    <name>overwriteBlocks</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>bool</name>
    </type>
    <name>getOverwriteBlocks</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>overwriteBlocks</name></expr>;</return>}</block>
  </function>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setBlockName</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>const</name>
        <name>QString</name>&amp;</type>
        <name>blockName</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>this</name>-&gt;
    <name>blockName</name>= 
    <name>blockName</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>QString</name>
    </type>
    <name>getBlockName</name>
    <parameter_list>()</parameter_list>
    <block>{ 
    <return>return 
    <expr>
    <name>this</name>-&gt;
    <name>blockName</name></expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RTransaction</name>
  </type>
  <name>apply</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RDocument</name>&amp;</type>
      <name>document</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>preview</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RPolyline</name>
  </type>
  <name>getBoundary</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>unitFactor</name>
    </decl>
  </param>)</parameter_list>;</function_decl></public>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
    <name>RDocument</name>&amp;</type>
    <name>sourceDocument</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>offset</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>scale</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>double</name>
    </type>
    <name>rotation</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>flipHorizontal</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>flipVertical</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>toCurrentLayer</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>overwriteLayers</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>overwriteBlocks</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>QString</name>
    </type>
    <name>blockName</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RPasteOperation*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
