<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./core/math" filename="RSpline.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RSPLINE_H</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RSPLINE_H</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"../core_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RArc.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RBox.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RDirected.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RExplodable.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RShape.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"RVector.h"</cpp:file></cpp:include>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>R_NO_OPENNURBS</name></cpp:ifndef>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"opennurbs/opennurbs.h"</cpp:file></cpp:include>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RDEFAULT_MIN1</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RDEFAULT_MIN1</name>-1</cpp:define>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/** * Low-level mathematical representation
  of a 2nd or 3rd degree spline. * * The spline may be defined by
  its control points or by its fit points but * not both. * *
  \ingroup math * \scriptable * \sharedPointerSupport * \copyable
  */</comment>
  <class>class 
  <macro>
    <name>QCADCORE_EXPORT</name>
  </macro>
  <name>RSpline</name>
  <super>: 
  <specifier>public</specifier>
  <name>RShape</name>, 
  <specifier>public</specifier>
  <name>RExplodable</name>, 
  <specifier>public</specifier>
  <name>RDirected</name></super>
  <block>{
  <private type="default"></private>
  <public>public: 
  <typedef>typedef 
  <function_decl>
  <type>
    <name>void</name>
  </type>(*
  <name>UpdateFromFitPointsFunction</name>)
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>RSpline</name>&amp;</type>
      <name>spline</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>useTangents</name>
    </decl>
  </param>)</parameter_list>;</function_decl></typedef>
  <constructor_decl>
  <name>RSpline</name>
  <parameter_list>()</parameter_list>;</constructor_decl>
  <constructor_decl>
  <name>RSpline</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RVector</name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>controlPoints</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>degree</name>
    </decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RSpline</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function>
    <type>
    <name>virtual</name>
    <name>RSpline</name>*</type>
    <name>clone</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>new 
    <call>
      <name>RSpline</name>
      <argument_list>(
      <argument>
        <expr>*
        <name>this</name></expr>
      </argument>)</argument_list>
    </call></expr>;</return>}</block>
  </function>
  <function_decl>
  <type>
    <name>static</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RSpline</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>createSplinesFromArc</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RArc</name>&amp;</type>
      <name>arc</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>static</name>
    <name>RSpline</name>
  </type>
  <name>createBezierFromSmallArc</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>r</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>a1</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>a2</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>to2D</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function>
    <type>
      <name>virtual</name>
      <name>bool</name>
    </type>
    <name>isInterpolated</name>
    <parameter_list>()</parameter_list>
    <specifier>const</specifier>
    <block>{ 
    <return>return 
    <expr>
      <name>true</name>
    </expr>;</return>}</block>
  </function>
  <comment type="line">//virtual RVector
  getClosestPointOnShape(const RVector&amp; p, bool limited)
  const;</comment>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>appendControlPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>point</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>removeLastControlPoint</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>upd</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setControlPoints</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RVector</name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>points</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getControlPoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getControlPointsWrapped</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>int</name>
  </type>
  <name>countControlPoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>appendFitPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>point</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>removeLastFitPoint</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>upd</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setFitPoints</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RVector</name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>points</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getFitPoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>int</name>
  </type>
  <name>countFitPoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>hasFitPoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>double</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getKnotVector</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setKnotVector</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>double</name>
      </argument>&gt;</argument_list></name>&amp;</type>
      <name>knots</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>double</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getWeights</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setDegree</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>d</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>int</name>
  </type>
  <name>getDegree</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>int</name>
  </type>
  <name>getOrder</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setPeriodic</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>bool</name>
      </type>
      <name>on</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="line">//bool isClosedPeriodic() const;</comment>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isClosed</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isPeriodic</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>getDirection1</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>getDirection2</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getStartPoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getEndPoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setStartPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>v</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setEndPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>v</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setTangents</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>start</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>end</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>unsetTangents</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setTangentAtStart</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>t</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getTangentAtStart</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>unsetTangentAtStart</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>setTangentAtEnd</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>t</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getTangentAtEnd</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>unsetTangentAtEnd</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>updateTangentsPeriodic</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RBox</name>
  </type>
  <name>getBoundingBox</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>double</name>
  </type>
  <name>getLength</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getPointAt</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>t</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getEndPoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>RVector</name>
  </type>
  <name>getMiddlePoint</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getMiddlePoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getCenterPoints</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RVector</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getPointsWithDistanceToEnd</name>
  <parameter_list>( 
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>distance</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>
      <name>RS</name>::
      <name>From</name></name>
    </type>
    <name>from</name>=
    <init>
      <expr>
        <name>
        <name>RS</name>::
        <name>FromAny</name></name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>RVector</name>
  </type>
  <name>getVectorTo</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>point</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>limited</name>=
    <init>
      <expr>
        <name>true</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>move</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>offset</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>rotate</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>double</name>
      </type>
      <name>rotation</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>const</name>
    <name>RVector</name>&amp;</type>
    <name>center</name>=
    <init>
      <expr>
        <name>RDEFAULT_RVECTOR</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>scale</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>scaleFactors</name>
    </decl>
  </param>, 
  <param>
    <decl>
    <type>
    <name>const</name>
    <name>RVector</name>&amp;</type>
    <name>center</name>=
    <init>
      <expr>
        <name>RDEFAULT_RVECTOR</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>mirror</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RLine</name>&amp;</type>
      <name>axis</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>flipHorizontal</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>flipVertical</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>bool</name>
  </type>
  <name>reverse</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>
    <name>RS</name>::
    <name>Ending</name></name>
  </type>
  <name>getTrimEnd</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>coord</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>trimPoint</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>trimStartPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>trimEndPoint</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>const</name>
      <name>RVector</name>&amp;</type>
      <name>p</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>virtual</name>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>QSharedPointer
      <argument_list>&lt;
      <argument>
        <name>RShape</name>
      </argument>&gt;</argument_list></name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getExploded</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>int</name>
    </type>
    <name>segments</name>=
    <init>
      <expr>
        <name>RDEFAULT_MIN1</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>QList
    <argument_list>&lt;
    <argument>
      <name>RSpline</name>
    </argument>&gt;</argument_list></name>
  </type>
  <name>getBezierSegments</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>bool</name>
  </type>
  <name>isValid</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getTDelta</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getTMin</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <function_decl>
  <type>
    <name>double</name>
  </type>
  <name>getTMax</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl>
  <comment type="block">/** * \nonscriptable */</comment>
  <function>
    <type>
      <name>static</name>
      <name>void</name>
    </type>
    <name>setUpdateFromFitPointsFunction</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>UpdateFromFitPointsFunction</name>
        </type>
        <name>f</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>updateFromFitPointsFunction</name>= 
    <name>f</name></expr>;</expr_stmt>}</block>
  </function></public>
  <protected>protected: 
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>invalidate</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>updateInternal</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>updateBoundingBox</name>
  <parameter_list>()</parameter_list>
  <specifier>const</specifier>;</function_decl></protected>
  <public>public: 
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>updateFromControlPoints</name>
  <parameter_list>()</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>updateFromFitPoints</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
      <name>bool</name>
    </type>
    <name>useTangents</name>=
    <init>
      <expr>
        <name>false</name>
      </expr>
    </init></decl>
  </param>)</parameter_list>;</function_decl>
  <comment type="block">/** * \getter{getControlPoints} *
  \setter{setControlPoints} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RVector</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>controlPoints</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * \getter{getKnotVector} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>double</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>knotVector</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * \getter{getFitPoints} *
  \setter{setFitPoints} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>RVector</name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>fitPoints</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * \getter{getDegree} *
  \setter{setDegree} */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>degree</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Unit vector start tangent.
  */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>tangentStart</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Unit vector end tangent. */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>RVector</name>
    </type>
    <name>tangentEnd</name>
  </decl>;</decl_stmt>
  <comment type="block">/** * Closed periodic flag. */</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>bool</name>
    </type>
    <name>periodic</name>
  </decl>;</decl_stmt></public>
  <protected>protected: 
  <function_decl>
  <type>
    <name>virtual</name>
    <name>void</name>
  </type>
  <name>print</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
        <name>QDebug</name>
      </type>
      <name>dbg</name>
    </decl>
  </param>)</parameter_list>
  <specifier>const</specifier>;</function_decl></protected>
  <private>private: 
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>R_NO_OPENNURBS</name></cpp:ifndef>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>ON_NurbsCurve</name>
    </type>
    <name>curve</name>
  </decl>;</decl_stmt>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>RBox</name>
    </type>
    <name>boundingBox</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>mutable</name>
      <name>QList
      <argument_list>&lt;
      <argument>
        <name>QSharedPointer
        <argument_list>&lt;
        <argument>
          <name>RShape</name>
        </argument>&gt;</argument_list></name>
      </argument>&gt;</argument_list></name>
    </type>
    <name>exploded</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>static</name>
      <name>UpdateFromFitPointsFunction</name>
    </type>
    <name>updateFromFitPointsFunction</name>
  </decl>;</decl_stmt></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>const RSpline*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RSpline*</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RSpline</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>QList&lt;RSpline&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RSpline&gt;</argument>)</argument_list>
  </macro>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>
    QSharedPointer&lt;RSpline&gt;*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
