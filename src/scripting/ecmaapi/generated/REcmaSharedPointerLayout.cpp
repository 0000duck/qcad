// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaSharedPointerLayout.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RDocument.h"
            
                #include "RTransaction.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaSharedPointerObject.h"
                 void REcmaSharedPointerLayout::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RLayoutPointer*) 0)));
        protoCreated = true;
    }

    
        // primary base class RObject:
        
            proto->setPrototype(engine.defaultPrototype(
            qMetaTypeId<RObjectPointer>()));
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
        // shared pointer support:
        REcmaHelper::registerFunction(&engine, proto, data, "data");
        

        REcmaHelper::registerFunction(&engine, proto, isNull, "isNull");
        

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class RObject
        REcmaHelper::registerFunction(&engine, proto, getRObject, "getRObject");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getType, "getType");
            
            REcmaHelper::registerFunction(&engine, proto, clone, "clone");
            
            REcmaHelper::registerFunction(&engine, proto, getName, "getName");
            
            REcmaHelper::registerFunction(&engine, proto, setName, "setName");
            
            REcmaHelper::registerFunction(&engine, proto, getTabOrder, "getTabOrder");
            
            REcmaHelper::registerFunction(&engine, proto, setTabOrder, "setTabOrder");
            
            REcmaHelper::registerFunction(&engine, proto, setMinLimits, "setMinLimits");
            
            REcmaHelper::registerFunction(&engine, proto, getMinLimits, "getMinLimits");
            
            REcmaHelper::registerFunction(&engine, proto, setMaxLimits, "setMaxLimits");
            
            REcmaHelper::registerFunction(&engine, proto, getMaxLimits, "getMaxLimits");
            
            REcmaHelper::registerFunction(&engine, proto, setInsertionBase, "setInsertionBase");
            
            REcmaHelper::registerFunction(&engine, proto, getInsertionBase, "getInsertionBase");
            
            REcmaHelper::registerFunction(&engine, proto, setMinExtents, "setMinExtents");
            
            REcmaHelper::registerFunction(&engine, proto, getMinExtents, "getMinExtents");
            
            REcmaHelper::registerFunction(&engine, proto, setMaxExtents, "setMaxExtents");
            
            REcmaHelper::registerFunction(&engine, proto, getMaxExtents, "getMaxExtents");
            
            REcmaHelper::registerFunction(&engine, proto, getProperty, "getProperty");
            
            REcmaHelper::registerFunction(&engine, proto, setProperty, "setProperty");
            
            REcmaHelper::registerFunction(&engine, proto, isSelectedForPropertyEditing, "isSelectedForPropertyEditing");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RLayoutPointer>(), *proto);
      
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, init, "init");
            

    // static properties:
    
            ctor.setProperty("PropertyCustom",
                qScriptValueFromValue(&engine, RLayout::PropertyCustom),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyName",
                qScriptValueFromValue(&engine, RLayout::PropertyName),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyTabOrder",
                qScriptValueFromValue(&engine, RLayout::PropertyTabOrder),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMinLimitsX",
                qScriptValueFromValue(&engine, RLayout::PropertyMinLimitsX),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMinLimitsY",
                qScriptValueFromValue(&engine, RLayout::PropertyMinLimitsY),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMinLimitsZ",
                qScriptValueFromValue(&engine, RLayout::PropertyMinLimitsZ),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMaxLimitsX",
                qScriptValueFromValue(&engine, RLayout::PropertyMaxLimitsX),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMaxLimitsY",
                qScriptValueFromValue(&engine, RLayout::PropertyMaxLimitsY),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMaxLimitsZ",
                qScriptValueFromValue(&engine, RLayout::PropertyMaxLimitsZ),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyInsertionBaseX",
                qScriptValueFromValue(&engine, RLayout::PropertyInsertionBaseX),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyInsertionBaseY",
                qScriptValueFromValue(&engine, RLayout::PropertyInsertionBaseY),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyInsertionBaseZ",
                qScriptValueFromValue(&engine, RLayout::PropertyInsertionBaseZ),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMinExtentsX",
                qScriptValueFromValue(&engine, RLayout::PropertyMinExtentsX),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMinExtentsY",
                qScriptValueFromValue(&engine, RLayout::PropertyMinExtentsY),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMinExtentsZ",
                qScriptValueFromValue(&engine, RLayout::PropertyMinExtentsZ),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMaxExtentsX",
                qScriptValueFromValue(&engine, RLayout::PropertyMaxExtentsX),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMaxExtentsY",
                qScriptValueFromValue(&engine, RLayout::PropertyMaxExtentsY),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyMaxExtentsZ",
                qScriptValueFromValue(&engine, RLayout::PropertyMaxExtentsZ),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            

    // enum values:
    

    ctor.setProperty("Inches",
    QScriptValue(RLayout::Inches),
    QScriptValue::ReadOnly);


    ctor.setProperty("Millimeters",
    QScriptValue(RLayout::Millimeters),
    QScriptValue::ReadOnly);


    ctor.setProperty("Pixels",
    QScriptValue(RLayout::Pixels),
    QScriptValue::ReadOnly);


    ctor.setProperty("Zero",
    QScriptValue(RLayout::Zero),
    QScriptValue::ReadOnly);


    ctor.setProperty("CounterClockWise",
    QScriptValue(RLayout::CounterClockWise),
    QScriptValue::ReadOnly);


    ctor.setProperty("Inverted",
    QScriptValue(RLayout::Inverted),
    QScriptValue::ReadOnly);


    ctor.setProperty("ClockWise",
    QScriptValue(RLayout::ClockWise),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RLayout::PlotPaperUnits>(
        &engine,
        toScriptValueEnumPlotPaperUnits,
        fromScriptValueEnumPlotPaperUnits,
        ctor.property(QString::fromLatin1("prototype"))
    );

    qScriptRegisterMetaType<RLayout::PlotRotation>(
        &engine,
        toScriptValueEnumPlotRotation,
        fromScriptValueEnumPlotRotation,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RLayoutPointer",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaSharedPointerLayout::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RLayout(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RLayout
                    * cppResult =
                    new
                    RLayout
                    ();
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
    } else 

    if( context->argumentCount() ==
        2
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RDocument * */
            
                && (
                
                        context->argument(
                        1
                        ).isString()
                ) /* type: QString */
            
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RLayout: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RLayout
                    * cppResult =
                    new
                    RLayout
                    (
                    a0
        ,
    a1
                    );
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RLayout(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaSharedPointerLayout::getRObject(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RObject* cppResult =
                    qscriptvalue_cast<RLayout*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaSharedPointerLayout::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RLayout"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaSharedPointerLayout::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("RObject");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaSharedPointerLayout::init
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::init", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::init";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RLayout::
       init();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.init().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::init", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::getType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::getType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::getType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("getType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RS::EntityType'
    RS::EntityType cppResult =
        
               self->getType();
        // return type: RS::EntityType
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.getType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::getType", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::clone
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::clone", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::clone";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("clone", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RLayout *'
    RLayout * cppResult =
        
               self->clone();
        // return type: RLayout *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.clone().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::clone", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::getName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::getName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::getName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("getName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getName();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.getName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::getName", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::setName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::setName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::setName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("setName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setName(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.setName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::setName", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::getTabOrder
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::getTabOrder", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::getTabOrder";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("getTabOrder", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getTabOrder();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.getTabOrder().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::getTabOrder", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::setTabOrder
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::setTabOrder", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::setTabOrder";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("setTabOrder", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setTabOrder(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.setTabOrder().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::setTabOrder", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::setMinLimits
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::setMinLimits", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::setMinLimits";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("setMinLimits", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMinLimits(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.setMinLimits().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::setMinLimits", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::getMinLimits
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::getMinLimits", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::getMinLimits";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("getMinLimits", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getMinLimits();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.getMinLimits().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::getMinLimits", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::setMaxLimits
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::setMaxLimits", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::setMaxLimits";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("setMaxLimits", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMaxLimits(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.setMaxLimits().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::setMaxLimits", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::getMaxLimits
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::getMaxLimits", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::getMaxLimits";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("getMaxLimits", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getMaxLimits();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.getMaxLimits().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::getMaxLimits", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::setInsertionBase
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::setInsertionBase", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::setInsertionBase";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("setInsertionBase", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setInsertionBase(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.setInsertionBase().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::setInsertionBase", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::getInsertionBase
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::getInsertionBase", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::getInsertionBase";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("getInsertionBase", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getInsertionBase();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.getInsertionBase().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::getInsertionBase", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::setMinExtents
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::setMinExtents", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::setMinExtents";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("setMinExtents", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMinExtents(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.setMinExtents().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::setMinExtents", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::getMinExtents
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::getMinExtents", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::getMinExtents";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("getMinExtents", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getMinExtents();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.getMinExtents().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::getMinExtents", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::setMaxExtents
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::setMaxExtents", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::setMaxExtents";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("setMaxExtents", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMaxExtents(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.setMaxExtents().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::setMaxExtents", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::getMaxExtents
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::getMaxExtents", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::getMaxExtents";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("getMaxExtents", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getMaxExtents();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.getMaxExtents().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::getMaxExtents", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::getProperty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::getProperty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::getProperty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("getProperty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0
        ,
    a1);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0
        ,
    a1
        ,
    a2);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.getProperty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::getProperty", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::setProperty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::setProperty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::setProperty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("setProperty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setProperty(a0
        ,
    a1);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNull()
        ) /* type: RTransaction * */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RLayout: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
                    // argument is pointer
                    RTransaction * a2 = NULL;

                    a2 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(2)
                        );
                    
                    if (a2==NULL && 
                        !context->argument(2).isNull()) {
                        return REcmaHelper::throwError("RLayout: Argument 2 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setProperty(a0
        ,
    a1
        ,
    a2);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.setProperty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::setProperty", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerLayout::isSelectedForPropertyEditing
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerLayout::isSelectedForPropertyEditing", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerLayout::isSelectedForPropertyEditing";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RLayout* self = 
                        getSelf("isSelectedForPropertyEditing", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isSelectedForPropertyEditing();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RLayout.isSelectedForPropertyEditing().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerLayout::isSelectedForPropertyEditing", context, engine);
            return result;
        }
         QScriptValue REcmaSharedPointerLayout::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RLayout* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RLayoutPointer(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaSharedPointerLayout::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RLayout* self = getSelf("RLayout", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RLayout* REcmaSharedPointerLayout::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RLayout* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RLayoutPointer >(context->thisObject())
                
                    ->data()
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RLayout.%1(): "
                        "This object is not a RLayout").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RLayout* REcmaSharedPointerLayout::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RLayout* selfBase = getSelf(fName, context);
                RLayout* self = dynamic_cast<RLayout*>(selfBase);
                //return REcmaHelper::scriptValueTo<RLayout >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RLayout.%1(): "
                    "This object is not a RLayout").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaSharedPointerLayout::data
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RLayout* self = getSelf("data", context);
    return qScriptValueFromValue(engine, self);
    }
     QScriptValue REcmaSharedPointerLayout::isNull
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RLayoutPointer* self = REcmaHelper::scriptValueTo<RLayoutPointer >(context->thisObject());

    //RLayout* self = getSelf("isNull", context);
    //Q_ASSERT(self!=NULL);
    if (self==NULL) {
        return REcmaHelper::throwError("self is NULL", context);
    }
    return qScriptValueFromValue(engine, self->isNull());
    }
     QScriptValue REcmaSharedPointerLayout::toScriptValueEnumPlotPaperUnits(QScriptEngine* engine, const RLayout::PlotPaperUnits& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaSharedPointerLayout::fromScriptValueEnumPlotPaperUnits(const QScriptValue& value, RLayout::PlotPaperUnits& out)
    
        {
            out = qvariant_cast<RLayout::PlotPaperUnits>(value.toVariant());
        }
         QScriptValue REcmaSharedPointerLayout::toScriptValueEnumPlotRotation(QScriptEngine* engine, const RLayout::PlotRotation& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaSharedPointerLayout::fromScriptValueEnumPlotRotation(const QScriptValue& value, RLayout::PlotRotation& out)
    
        {
            out = qvariant_cast<RLayout::PlotRotation>(value.toVariant());
        }
        