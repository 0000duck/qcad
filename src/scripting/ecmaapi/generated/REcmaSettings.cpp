// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaSettings.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaSettings::init(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RSettings*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
        engine.setDefaultPrototype(
            qMetaTypeId<RSettings*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(create, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, uninit, "uninit");
            
            REcmaHelper::registerFunction(&engine, &ctor, getLocale, "getLocale");
            
            REcmaHelper::registerFunction(&engine, &ctor, loadTranslations, "loadTranslations");
            
            REcmaHelper::registerFunction(&engine, &ctor, getOriginalArguments, "getOriginalArguments");
            
            REcmaHelper::registerFunction(&engine, &ctor, setOriginalArguments, "setOriginalArguments");
            
            REcmaHelper::registerFunction(&engine, &ctor, isDeployed, "isDeployed");
            
            REcmaHelper::registerFunction(&engine, &ctor, getApplicationPath, "getApplicationPath");
            
            REcmaHelper::registerFunction(&engine, &ctor, getPluginPath, "getPluginPath");
            
            REcmaHelper::registerFunction(&engine, &ctor, isGuiEnabled, "isGuiEnabled");
            
            REcmaHelper::registerFunction(&engine, &ctor, isDebuggerEnabled, "isDebuggerEnabled");
            
            REcmaHelper::registerFunction(&engine, &ctor, hasQuitFlag, "hasQuitFlag");
            
            REcmaHelper::registerFunction(&engine, &ctor, setQuitFlag, "setQuitFlag");
            
            REcmaHelper::registerFunction(&engine, &ctor, getFileName, "getFileName");
            
            REcmaHelper::registerFunction(&engine, &ctor, getPath, "getPath");
            
            REcmaHelper::registerFunction(&engine, &ctor, getLaunchPath, "getLaunchPath");
            
            REcmaHelper::registerFunction(&engine, &ctor, setLaunchPath, "setLaunchPath");
            
            REcmaHelper::registerFunction(&engine, &ctor, getDefaultStyle, "getDefaultStyle");
            
            REcmaHelper::registerFunction(&engine, &ctor, setRulerFont, "setRulerFont");
            
            REcmaHelper::registerFunction(&engine, &ctor, getRulerFont, "getRulerFont");
            
            REcmaHelper::registerFunction(&engine, &ctor, setSnapLabelFont, "setSnapLabelFont");
            
            REcmaHelper::registerFunction(&engine, &ctor, getSnapLabelFont, "getSnapLabelFont");
            
            REcmaHelper::registerFunction(&engine, &ctor, getInfoLabelFont, "getInfoLabelFont");
            
            REcmaHelper::registerFunction(&engine, &ctor, getStatusBarFont, "getStatusBarFont");
            
            REcmaHelper::registerFunction(&engine, &ctor, getAutoScalePatterns, "getAutoScalePatterns");
            
            REcmaHelper::registerFunction(&engine, &ctor, getColorCorrection, "getColorCorrection");
            
            REcmaHelper::registerFunction(&engine, &ctor, getColorThreshold, "getColorThreshold");
            
            REcmaHelper::registerFunction(&engine, &ctor, getTextHeightThreshold, "getTextHeightThreshold");
            
            REcmaHelper::registerFunction(&engine, &ctor, getQtVersion, "getQtVersion");
            
            REcmaHelper::registerFunction(&engine, &ctor, getReleaseDate, "getReleaseDate");
            
            REcmaHelper::registerFunction(&engine, &ctor, getVersionString, "getVersionString");
            
            REcmaHelper::registerFunction(&engine, &ctor, getNumericalVersionString, "getNumericalVersionString");
            
            REcmaHelper::registerFunction(&engine, &ctor, getMajorVersion, "getMajorVersion");
            
            REcmaHelper::registerFunction(&engine, &ctor, getMinorVersion, "getMinorVersion");
            
            REcmaHelper::registerFunction(&engine, &ctor, getRevisionVersion, "getRevisionVersion");
            
            REcmaHelper::registerFunction(&engine, &ctor, getBuildVersion, "getBuildVersion");
            
            REcmaHelper::registerFunction(&engine, &ctor, getSnapRange, "getSnapRange");
            
            REcmaHelper::registerFunction(&engine, &ctor, getPreviewEntities, "getPreviewEntities");
            
            REcmaHelper::registerFunction(&engine, &ctor, getShowCrosshair, "getShowCrosshair");
            
            REcmaHelper::registerFunction(&engine, &ctor, setShowCrosshair, "setShowCrosshair");
            
            REcmaHelper::registerFunction(&engine, &ctor, getShowLargeCrosshair, "getShowLargeCrosshair");
            
            REcmaHelper::registerFunction(&engine, &ctor, setShowLargeCrosshair, "setShowLargeCrosshair");
            
            REcmaHelper::registerFunction(&engine, &ctor, getConcurrentDrawing, "getConcurrentDrawing");
            
            REcmaHelper::registerFunction(&engine, &ctor, setConcurrentDrawing, "setConcurrentDrawing");
            
            REcmaHelper::registerFunction(&engine, &ctor, getNumberLocale, "getNumberLocale");
            
            REcmaHelper::registerFunction(&engine, &ctor, initRecentFiles, "initRecentFiles");
            
            REcmaHelper::registerFunction(&engine, &ctor, addRecentFile, "addRecentFile");
            
            REcmaHelper::registerFunction(&engine, &ctor, removeRecentFile, "removeRecentFile");
            
            REcmaHelper::registerFunction(&engine, &ctor, getRecentFiles, "getRecentFiles");
            
            REcmaHelper::registerFunction(&engine, &ctor, clearRecentFiles, "clearRecentFiles");
            
            REcmaHelper::registerFunction(&engine, &ctor, getColor, "getColor");
            
            REcmaHelper::registerFunction(&engine, &ctor, getValue, "getValue");
            
            REcmaHelper::registerFunction(&engine, &ctor, getBoolValue, "getBoolValue");
            
            REcmaHelper::registerFunction(&engine, &ctor, getDoubleValue, "getDoubleValue");
            
            REcmaHelper::registerFunction(&engine, &ctor, getIntValue, "getIntValue");
            
            REcmaHelper::registerFunction(&engine, &ctor, getStringValue, "getStringValue");
            
            REcmaHelper::registerFunction(&engine, &ctor, setValue, "setValue");
            
            REcmaHelper::registerFunction(&engine, &ctor, removeValue, "removeValue");
            
            REcmaHelper::registerFunction(&engine, &ctor, setApplicationName, "setApplicationName");
            
            REcmaHelper::registerFunction(&engine, &ctor, getAllKeys, "getAllKeys");
            
            REcmaHelper::registerFunction(&engine, &ctor, getQSettings, "getQSettings");
            
            REcmaHelper::registerFunction(&engine, &ctor, resetCache, "resetCache");
            
            REcmaHelper::registerFunction(&engine, &ctor, isXDataEnabled, "isXDataEnabled");
            

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RSettings",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaSettings::create(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RSettings(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
    
            // constructor without variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RSettings
                    * cppResult =
                    new
                    RSettings
                    ();
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RSettings(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaSettings::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RSettings"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaSettings::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaSettings::uninit
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::uninit", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::uninit";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       uninit();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.uninit().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::uninit", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getLocale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getLocale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getLocale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getLocale();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getLocale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getLocale", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::loadTranslations
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::loadTranslations", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::loadTranslations";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       loadTranslations(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isArray()
        ) /* type: QStringList */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isArray
                    QStringList
                    a1;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(1),
                        a1
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       loadTranslations(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.loadTranslations().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::loadTranslations", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getOriginalArguments
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getOriginalArguments", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getOriginalArguments";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        RSettings::
       getOriginalArguments();
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getOriginalArguments().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getOriginalArguments", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setOriginalArguments
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setOriginalArguments", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setOriginalArguments";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QStringList */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QStringList
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setOriginalArguments(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setOriginalArguments().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setOriginalArguments", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::isDeployed
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::isDeployed", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::isDeployed";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       isDeployed();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.isDeployed().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::isDeployed", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getApplicationPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getApplicationPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getApplicationPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getApplicationPath();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getApplicationPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getApplicationPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getPluginPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getPluginPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getPluginPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getPluginPath();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getPluginPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getPluginPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::isGuiEnabled
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::isGuiEnabled", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::isGuiEnabled";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       isGuiEnabled();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.isGuiEnabled().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::isGuiEnabled", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::isDebuggerEnabled
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::isDebuggerEnabled", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::isDebuggerEnabled";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       isDebuggerEnabled();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.isDebuggerEnabled().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::isDebuggerEnabled", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::hasQuitFlag
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::hasQuitFlag", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::hasQuitFlag";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       hasQuitFlag();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.hasQuitFlag().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::hasQuitFlag", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setQuitFlag
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setQuitFlag", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setQuitFlag";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setQuitFlag();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setQuitFlag().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setQuitFlag", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getFileName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getFileName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getFileName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getFileName();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getFileName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getFileName", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getPath();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getLaunchPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getLaunchPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getLaunchPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getLaunchPath();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getLaunchPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getLaunchPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setLaunchPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setLaunchPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setLaunchPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setLaunchPath(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setLaunchPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setLaunchPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getDefaultStyle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getDefaultStyle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getDefaultStyle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getDefaultStyle();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getDefaultStyle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getDefaultStyle", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setRulerFont
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setRulerFont", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setRulerFont";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QFont */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QFont*
                    ap0 =
                    qscriptvalue_cast<
                    QFont*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RSettings: Argument 0 is not of type QFont*.",
                               context);                    
                    }
                    QFont& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setRulerFont(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setRulerFont().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setRulerFont", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getRulerFont
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getRulerFont", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getRulerFont";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QFont'
    QFont cppResult =
        RSettings::
       getRulerFont();
        // return type: QFont
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getRulerFont().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getRulerFont", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setSnapLabelFont
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setSnapLabelFont", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setSnapLabelFont";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QFont */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QFont*
                    ap0 =
                    qscriptvalue_cast<
                    QFont*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RSettings: Argument 0 is not of type QFont*.",
                               context);                    
                    }
                    QFont& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setSnapLabelFont(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setSnapLabelFont().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setSnapLabelFont", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getSnapLabelFont
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getSnapLabelFont", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getSnapLabelFont";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QFont'
    QFont cppResult =
        RSettings::
       getSnapLabelFont();
        // return type: QFont
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getSnapLabelFont().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getSnapLabelFont", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getInfoLabelFont
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getInfoLabelFont", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getInfoLabelFont";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QFont'
    QFont cppResult =
        RSettings::
       getInfoLabelFont();
        // return type: QFont
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getInfoLabelFont().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getInfoLabelFont", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getStatusBarFont
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getStatusBarFont", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getStatusBarFont";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QFont'
    QFont cppResult =
        RSettings::
       getStatusBarFont();
        // return type: QFont
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getStatusBarFont().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getStatusBarFont", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getAutoScalePatterns
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getAutoScalePatterns", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getAutoScalePatterns";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       getAutoScalePatterns();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getAutoScalePatterns().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getAutoScalePatterns", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getColorCorrection
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getColorCorrection", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getColorCorrection";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       getColorCorrection();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getColorCorrection().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getColorCorrection", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getColorThreshold
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getColorThreshold", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getColorThreshold";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RSettings::
       getColorThreshold();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getColorThreshold().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getColorThreshold", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getTextHeightThreshold
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getTextHeightThreshold", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getTextHeightThreshold";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RSettings::
       getTextHeightThreshold();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getTextHeightThreshold().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getTextHeightThreshold", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getQtVersion
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getQtVersion", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getQtVersion";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getQtVersion();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getQtVersion().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getQtVersion", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getReleaseDate
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getReleaseDate", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getReleaseDate";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getReleaseDate();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getReleaseDate().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getReleaseDate", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getVersionString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getVersionString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getVersionString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getVersionString();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getVersionString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getVersionString", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getNumericalVersionString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getNumericalVersionString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getNumericalVersionString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getNumericalVersionString();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getNumericalVersionString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getNumericalVersionString", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getMajorVersion
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getMajorVersion", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getMajorVersion";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RSettings::
       getMajorVersion();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getMajorVersion().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getMajorVersion", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getMinorVersion
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getMinorVersion", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getMinorVersion";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RSettings::
       getMinorVersion();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getMinorVersion().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getMinorVersion", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getRevisionVersion
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getRevisionVersion", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getRevisionVersion";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RSettings::
       getRevisionVersion();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getRevisionVersion().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getRevisionVersion", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getBuildVersion
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getBuildVersion", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getBuildVersion";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RSettings::
       getBuildVersion();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getBuildVersion().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getBuildVersion", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getSnapRange
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getSnapRange", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getSnapRange";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RSettings::
       getSnapRange();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getSnapRange().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getSnapRange", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getPreviewEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getPreviewEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getPreviewEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RSettings::
       getPreviewEntities();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getPreviewEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getPreviewEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getShowCrosshair
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getShowCrosshair", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getShowCrosshair";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       getShowCrosshair();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getShowCrosshair().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getShowCrosshair", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setShowCrosshair
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setShowCrosshair", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setShowCrosshair";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setShowCrosshair(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setShowCrosshair().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setShowCrosshair", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getShowLargeCrosshair
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getShowLargeCrosshair", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getShowLargeCrosshair";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       getShowLargeCrosshair();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getShowLargeCrosshair().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getShowLargeCrosshair", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setShowLargeCrosshair
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setShowLargeCrosshair", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setShowLargeCrosshair";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setShowLargeCrosshair(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setShowLargeCrosshair().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setShowLargeCrosshair", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getConcurrentDrawing
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getConcurrentDrawing", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getConcurrentDrawing";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       getConcurrentDrawing();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getConcurrentDrawing().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getConcurrentDrawing", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setConcurrentDrawing
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setConcurrentDrawing", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setConcurrentDrawing";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setConcurrentDrawing(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setConcurrentDrawing().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setConcurrentDrawing", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getNumberLocale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getNumberLocale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getNumberLocale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QLocale'
    QLocale cppResult =
        RSettings::
       getNumberLocale();
        // return type: QLocale
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getNumberLocale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getNumberLocale", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::initRecentFiles
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::initRecentFiles", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::initRecentFiles";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       initRecentFiles();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.initRecentFiles().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::initRecentFiles", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::addRecentFile
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::addRecentFile", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::addRecentFile";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       addRecentFile(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.addRecentFile().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::addRecentFile", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::removeRecentFile
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::removeRecentFile", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::removeRecentFile";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       removeRecentFile(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.removeRecentFile().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::removeRecentFile", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getRecentFiles
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getRecentFiles", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getRecentFiles";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        RSettings::
       getRecentFiles();
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getRecentFiles().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getRecentFiles", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::clearRecentFiles
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::clearRecentFiles", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::clearRecentFiles";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       clearRecentFiles();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.clearRecentFiles().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::clearRecentFiles", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RColor'
    RColor cppResult =
        RSettings::
       getColor(a0);
        // return type: RColor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RColor */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RColor*
                    ap1 =
                    qscriptvalue_cast<
                    RColor*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RSettings: Argument 1 is not of type RColor.",
                               context);                    
                    }
                    RColor 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'RColor'
    RColor cppResult =
        RSettings::
       getColor(a0
        ,
    a1);
        // return type: RColor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getValue
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getValue", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getValue";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QVariant'
    QVariant cppResult =
        RSettings::
       getValue(a0);
        // return type: QVariant
                // QVariant:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'QVariant'
    QVariant cppResult =
        RSettings::
       getValue(a0
        ,
    a1);
        // return type: QVariant
                // QVariant:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getValue().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getValue", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getBoolValue
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getBoolValue", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getBoolValue";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       getBoolValue(a0
        ,
    a1);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getBoolValue().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getBoolValue", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getDoubleValue
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getDoubleValue", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getDoubleValue";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        RSettings::
       getDoubleValue(a0
        ,
    a1);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getDoubleValue().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getDoubleValue", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getIntValue
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getIntValue", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getIntValue";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RSettings::
       getIntValue(a0
        ,
    a1);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getIntValue().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getIntValue", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getStringValue
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getStringValue", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getStringValue";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RSettings::
       getStringValue(a0
        ,
    a1);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getStringValue().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getStringValue", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setValue
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setValue", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setValue";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setValue(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setValue().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setValue", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::removeValue
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::removeValue", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::removeValue";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       removeValue(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.removeValue().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::removeValue", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::setApplicationName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::setApplicationName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::setApplicationName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       setApplicationName(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.setApplicationName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::setApplicationName", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getAllKeys
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getAllKeys", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getAllKeys";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        RSettings::
       getAllKeys(a0);
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getAllKeys().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getAllKeys", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::getQSettings
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::getQSettings", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::getQSettings";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSettings *'
    QSettings * cppResult =
        RSettings::
       getQSettings();
        // return type: QSettings *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.getQSettings().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::getQSettings", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::resetCache
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::resetCache", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::resetCache";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RSettings::
       resetCache();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.resetCache().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::resetCache", context, engine);
            return result;
        }
         QScriptValue
        REcmaSettings::isXDataEnabled
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSettings::isXDataEnabled", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSettings::isXDataEnabled";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RSettings::
       isXDataEnabled();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RSettings.isXDataEnabled().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSettings::isXDataEnabled", context, engine);
            return result;
        }
         QScriptValue REcmaSettings::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RSettings* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RSettings(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaSettings::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RSettings* self = getSelf("RSettings", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RSettings* REcmaSettings::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RSettings* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RSettings >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RSettings.%1(): "
                        "This object is not a RSettings").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RSettings* REcmaSettings::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RSettings* selfBase = getSelf(fName, context);
                RSettings* self = dynamic_cast<RSettings*>(selfBase);
                //return REcmaHelper::scriptValueTo<RSettings >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RSettings.%1(): "
                    "This object is not a RSettings").arg(fName),
                    context);
            }

            return self;
            


        }
        