// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaTextLayout.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaTextLayout::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RTextLayout*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, isEmpty, "isEmpty");
            
            REcmaHelper::registerFunction(&engine, proto, hasLayout, "hasLayout");
            
            REcmaHelper::registerFunction(&engine, proto, getLayout, "getLayout");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RTextLayout*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RTextLayout
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RTextLayout",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaTextLayout::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RTextLayout(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RTextLayout
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        2
                && (
                
                        context->argument(
                        0
                        ).isArray()
                ) /* type: QList < RPainterPath > */
            
                && (
                
                        context->argument(
                        1
                        ).isVariant()
                ) /* type: QColor */
            
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    QColor*
                    ap1 =
                    qscriptvalue_cast<
                    QColor*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RTextLayout: Argument 1 is not of type QColor.",
                               context);                    
                    }
                    QColor 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RTextLayout
                    cppResult(
                    a0
        ,
    a1
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RTextLayout(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaTextLayout::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RTextLayout"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaTextLayout::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaTextLayout::isEmpty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTextLayout::isEmpty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTextLayout::isEmpty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextLayout* self = 
                        getSelf("isEmpty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isEmpty();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextLayout.isEmpty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTextLayout::isEmpty", context, engine);
            return result;
        }
         QScriptValue
        REcmaTextLayout::hasLayout
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTextLayout::hasLayout", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTextLayout::hasLayout";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextLayout* self = 
                        getSelf("hasLayout", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasLayout();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextLayout.hasLayout().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTextLayout::hasLayout", context, engine);
            return result;
        }
         QScriptValue
        REcmaTextLayout::getLayout
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTextLayout::getLayout", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTextLayout::getLayout";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextLayout* self = 
                        getSelf("getLayout", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSharedPointer < QTextLayout >'
    QSharedPointer < QTextLayout > cppResult =
        
               self->getLayout();
        // return type: QSharedPointer < QTextLayout >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextLayout.getLayout().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTextLayout::getLayout", context, engine);
            return result;
        }
         QScriptValue REcmaTextLayout::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RTextLayout* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RTextLayout(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaTextLayout::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RTextLayout cp = qscriptvalue_cast<RTextLayout>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaTextLayout::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RTextLayout* self = getSelf("RTextLayout", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RTextLayout* REcmaTextLayout::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RTextLayout* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RTextLayout >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RTextLayout.%1(): "
                        "This object is not a RTextLayout").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RTextLayout* REcmaTextLayout::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RTextLayout* selfBase = getSelf(fName, context);
                RTextLayout* self = dynamic_cast<RTextLayout*>(selfBase);
                //return REcmaHelper::scriptValueTo<RTextLayout >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RTextLayout.%1(): "
                    "This object is not a RTextLayout").arg(fName),
                    context);
            }

            return self;
            


        }
        