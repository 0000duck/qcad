// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaPluginInfo.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaPluginInfo::init(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RPluginInfo*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getFileName, "getFileName");
            
            REcmaHelper::registerFunction(&engine, proto, setFileName, "setFileName");
            
            REcmaHelper::registerFunction(&engine, proto, getAboutString, "getAboutString");
            
            REcmaHelper::registerFunction(&engine, proto, setAboutString, "setAboutString");
            
            REcmaHelper::registerFunction(&engine, proto, getDescription, "getDescription");
            
            REcmaHelper::registerFunction(&engine, proto, setDescription, "setDescription");
            
            REcmaHelper::registerFunction(&engine, proto, getVersionString, "getVersionString");
            
            REcmaHelper::registerFunction(&engine, proto, getQtVersionString, "getQtVersionString");
            
            REcmaHelper::registerFunction(&engine, proto, setVersionString, "setVersionString");
            
            REcmaHelper::registerFunction(&engine, proto, getErrorString, "getErrorString");
            
            REcmaHelper::registerFunction(&engine, proto, setErrorString, "setErrorString");
            
            REcmaHelper::registerFunction(&engine, proto, getLicense, "getLicense");
            
            REcmaHelper::registerFunction(&engine, proto, setLicense, "setLicense");
            
            REcmaHelper::registerFunction(&engine, proto, getUrl, "getUrl");
            
            REcmaHelper::registerFunction(&engine, proto, setUrl, "setUrl");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RPluginInfo*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RPluginInfo
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(create, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RPluginInfo",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaPluginInfo::create(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RPluginInfo(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RPluginInfo
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RPluginInfo(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaPluginInfo::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RPluginInfo"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaPluginInfo::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaPluginInfo::getFileName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::getFileName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::getFileName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("getFileName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getFileName();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.getFileName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::getFileName", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::setFileName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::setFileName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::setFileName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("setFileName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFileName(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.setFileName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::setFileName", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::getAboutString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::getAboutString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::getAboutString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("getAboutString", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getAboutString();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.getAboutString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::getAboutString", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::setAboutString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::setAboutString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::setAboutString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("setAboutString", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAboutString(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.setAboutString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::setAboutString", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::getDescription
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::getDescription", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::getDescription";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("getDescription", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getDescription();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.getDescription().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::getDescription", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::setDescription
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::setDescription", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::setDescription";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("setDescription", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDescription(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.setDescription().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::setDescription", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::getVersionString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::getVersionString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::getVersionString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("getVersionString", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getVersionString();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.getVersionString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::getVersionString", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::getQtVersionString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::getQtVersionString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::getQtVersionString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("getQtVersionString", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getQtVersionString();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.getQtVersionString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::getQtVersionString", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::setVersionString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::setVersionString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::setVersionString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("setVersionString", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setVersionString(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.setVersionString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::setVersionString", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::getErrorString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::getErrorString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::getErrorString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("getErrorString", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getErrorString();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.getErrorString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::getErrorString", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::setErrorString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::setErrorString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::setErrorString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("setErrorString", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setErrorString(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.setErrorString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::setErrorString", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::getLicense
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::getLicense", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::getLicense";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("getLicense", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getLicense();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.getLicense().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::getLicense", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::setLicense
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::setLicense", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::setLicense";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("setLicense", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLicense(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.setLicense().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::setLicense", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::getUrl
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::getUrl", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::getUrl";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("getUrl", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getUrl();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.getUrl().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::getUrl", context, engine);
            return result;
        }
         QScriptValue
        REcmaPluginInfo::setUrl
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaPluginInfo::setUrl", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaPluginInfo::setUrl";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RPluginInfo* self = 
                        getSelf("setUrl", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setUrl(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RPluginInfo.setUrl().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaPluginInfo::setUrl", context, engine);
            return result;
        }
         QScriptValue REcmaPluginInfo::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RPluginInfo* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RPluginInfo(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaPluginInfo::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RPluginInfo cp = qscriptvalue_cast<RPluginInfo>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaPluginInfo::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RPluginInfo* self = getSelf("RPluginInfo", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RPluginInfo* REcmaPluginInfo::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RPluginInfo* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RPluginInfo >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RPluginInfo.%1(): "
                        "This object is not a RPluginInfo").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RPluginInfo* REcmaPluginInfo::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RPluginInfo* selfBase = getSelf(fName, context);
                RPluginInfo* self = dynamic_cast<RPluginInfo*>(selfBase);
                //return REcmaHelper::scriptValueTo<RPluginInfo >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RPluginInfo.%1(): "
                    "This object is not a RPluginInfo").arg(fName),
                    context);
            }

            return self;
            


        }
        