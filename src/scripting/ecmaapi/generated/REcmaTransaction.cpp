// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaTransaction.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RStorage.h"
            
                #include "RExporter.h"
            
                #include "RDocument.h"
            
            
        // includes for base ecma wrapper classes
         void REcmaTransaction::init(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RTransaction*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, setRecordAffectedObjects, "setRecordAffectedObjects");
            
            REcmaHelper::registerFunction(&engine, proto, setAllowAll, "setAllowAll");
            
            REcmaHelper::registerFunction(&engine, proto, setAllowInvisible, "setAllowInvisible");
            
            REcmaHelper::registerFunction(&engine, proto, setSpatialIndexDisabled, "setSpatialIndexDisabled");
            
            REcmaHelper::registerFunction(&engine, proto, isUndoable, "isUndoable");
            
            REcmaHelper::registerFunction(&engine, proto, isFailed, "isFailed");
            
            REcmaHelper::registerFunction(&engine, proto, redo, "redo");
            
            REcmaHelper::registerFunction(&engine, proto, undo, "undo");
            
            REcmaHelper::registerFunction(&engine, proto, end, "end");
            
            REcmaHelper::registerFunction(&engine, proto, updateOverwrittenBlockReferences, "updateOverwrittenBlockReferences");
            
            REcmaHelper::registerFunction(&engine, proto, setId, "setId");
            
            REcmaHelper::registerFunction(&engine, proto, getId, "getId");
            
            REcmaHelper::registerFunction(&engine, proto, getText, "getText");
            
            REcmaHelper::registerFunction(&engine, proto, overwriteBlock, "overwriteBlock");
            
            REcmaHelper::registerFunction(&engine, proto, addObject, "addObject");
            
            REcmaHelper::registerFunction(&engine, proto, addAffectedObject, "addAffectedObject");
            
            REcmaHelper::registerFunction(&engine, proto, addAffectedObjects, "addAffectedObjects");
            
            REcmaHelper::registerFunction(&engine, proto, deleteObject, "deleteObject");
            
            REcmaHelper::registerFunction(&engine, proto, getAffectedObjects, "getAffectedObjects");
            
            REcmaHelper::registerFunction(&engine, proto, getStatusChanges, "getStatusChanges");
            
            REcmaHelper::registerFunction(&engine, proto, getPropertyChanges, "getPropertyChanges");
            
            REcmaHelper::registerFunction(&engine, proto, hasOnlyChanges, "hasOnlyChanges");
            
            REcmaHelper::registerFunction(&engine, proto, fail, "fail");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RTransaction*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RTransaction
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(create, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RTransaction",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaTransaction::create(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RTransaction(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RTransaction
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RStorage */
            
    ){
    // prepare arguments:
    
                    // argument is reference
                    RStorage*
                    ap0 =
                    qscriptvalue_cast<
                    RStorage*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type RStorage*.",
                               context);                    
                    }
                    RStorage& a0 = *ap0;
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RTransaction
                    cppResult(
                    a0
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        5
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RStorage */
            
                && (
                
                        context->argument(
                        1
                        ).isNumber()
                ) /* type: int */
            
                && (
                
                        context->argument(
                        2
                        ).isString()
                ) /* type: QString */
            
                && (
                
                        context->argument(
                        3
                        ).isArray()
                ) /* type: QList < RObject::Id > */
            
                && (
                
                        context->argument(
                        4
                        ).isVariant()
                        ||
                    
                        context->argument(
                        4
                        ).isQObject()
                        ||
                    
                        context->argument(
                        4
                        ).isNull()
                ) /* type: QMap < RObject::Id , QList < RPropertyChange > > */
            
    ){
    // prepare arguments:
    
                    // argument is reference
                    RStorage*
                    ap0 =
                    qscriptvalue_cast<
                    RStorage*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type RStorage*.",
                               context);                    
                    }
                    RStorage& a0 = *ap0;
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    QString
                    a2 =
                    (QString)
                    
                    context->argument( 2 ).
                    toString();
                
                    // argument isArray
                    QList < RObject::Id >
                    a3;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(3),
                        a3
                    );
                
                    // argument is reference
                    QMap < RObject::Id , QList < RPropertyChange > >*
                    ap4 =
                    qscriptvalue_cast<
                    QMap < RObject::Id , QList < RPropertyChange > >*
                        >(
                        context->argument(
                        4
                        )
                    );
                    if( ap4 == NULL ){
                           return REcmaHelper::throwError("RTransaction: Argument 4 is not of type QMap < RObject::Id , QList < RPropertyChange > >*.",
                               context);                    
                    }
                    QMap < RObject::Id , QList < RPropertyChange > >& a4 = *ap4;
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RTransaction
                    cppResult(
                    a0
        ,
    a1
        ,
    a2
        ,
    a3
        ,
    a4
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        2
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RStorage */
            
                && (
                
                        context->argument(
                        1
                        ).isString()
                ) /* type: QString */
            
    ){
    // prepare arguments:
    
                    // argument is reference
                    RStorage*
                    ap0 =
                    qscriptvalue_cast<
                    RStorage*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type RStorage*.",
                               context);                    
                    }
                    RStorage& a0 = *ap0;
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RTransaction
                    cppResult(
                    a0
        ,
    a1
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        3
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RStorage */
            
                && (
                
                        context->argument(
                        1
                        ).isString()
                ) /* type: QString */
            
                && (
                
                        context->argument(
                        2
                        ).isBool()
                ) /* type: bool */
            
    ){
    // prepare arguments:
    
                    // argument is reference
                    RStorage*
                    ap0 =
                    qscriptvalue_cast<
                    RStorage*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type RStorage*.",
                               context);                    
                    }
                    RStorage& a0 = *ap0;
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RTransaction
                    cppResult(
                    a0
        ,
    a1
        ,
    a2
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RTransaction(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaTransaction::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RTransaction"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaTransaction::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaTransaction::setRecordAffectedObjects
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::setRecordAffectedObjects", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::setRecordAffectedObjects";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("setRecordAffectedObjects", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRecordAffectedObjects(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.setRecordAffectedObjects().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::setRecordAffectedObjects", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::setAllowAll
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::setAllowAll", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::setAllowAll";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("setAllowAll", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAllowAll(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.setAllowAll().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::setAllowAll", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::setAllowInvisible
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::setAllowInvisible", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::setAllowInvisible";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("setAllowInvisible", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAllowInvisible(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.setAllowInvisible().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::setAllowInvisible", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::setSpatialIndexDisabled
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::setSpatialIndexDisabled", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::setSpatialIndexDisabled";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("setSpatialIndexDisabled", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setSpatialIndexDisabled(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.setSpatialIndexDisabled().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::setSpatialIndexDisabled", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::isUndoable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::isUndoable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::isUndoable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("isUndoable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isUndoable();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.isUndoable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::isUndoable", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::isFailed
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::isFailed", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::isFailed";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("isFailed", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isFailed();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.isFailed().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::isFailed", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::redo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::redo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::redo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("redo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->redo();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RTransaction: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->redo(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.redo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::redo", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::undo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::undo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::undo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("undo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->undo();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RTransaction: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->undo(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.undo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::undo", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::end
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::end", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::end";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("end", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->end();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.end().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::end", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::updateOverwrittenBlockReferences
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::updateOverwrittenBlockReferences", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::updateOverwrittenBlockReferences";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("updateOverwrittenBlockReferences", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateOverwrittenBlockReferences();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.updateOverwrittenBlockReferences().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::updateOverwrittenBlockReferences", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::setId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::setId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::setId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("setId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setId(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.setId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::setId", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::getId
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::getId", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::getId";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("getId", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getId();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.getId().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::getId", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::getText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::getText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::getText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("getText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getText();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.getText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::getText", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::overwriteBlock
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::overwriteBlock", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::overwriteBlock";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("overwriteBlock", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RBlock > */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RBlock > 
                    a0;

                    // argument might be a simple pointer:
                     RBlock * o0 = 
                    qscriptvalue_cast < RBlock * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        QSharedPointer < RBlock >(o0->clone());
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RBlock >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RBlock >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RBlock .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RBlock .",
                           //    context);                    
                    }

                    //QSharedPointer < RBlock > 
                    //a0 =
                    //QSharedPointer < RBlock >(o0->clone());
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->overwriteBlock(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.overwriteBlock().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::overwriteBlock", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::addObject
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::addObject", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::addObject";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("addObject", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RObject > */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RObject > 
                    a0;

                    // argument might be a simple pointer:
                     RObject * o0 = 
                    qscriptvalue_cast < RObject * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        QSharedPointer < RObject >(o0->clone());
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RObject >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RObject >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .",
                           //    context);                    
                    }

                    //QSharedPointer < RObject > 
                    //a0 =
                    //QSharedPointer < RObject >(o0->clone());
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->addObject(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RObject > */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RObject > 
                    a0;

                    // argument might be a simple pointer:
                     RObject * o0 = 
                    qscriptvalue_cast < RObject * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        QSharedPointer < RObject >(o0->clone());
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RObject >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RObject >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .",
                           //    context);                    
                    }

                    //QSharedPointer < RObject > 
                    //a0 =
                    //QSharedPointer < RObject >(o0->clone());
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->addObject(a0
        ,
    a1);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RObject > */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isArray()
        ) /* type: QSet < RPropertyTypeId > */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RObject > 
                    a0;

                    // argument might be a simple pointer:
                     RObject * o0 = 
                    qscriptvalue_cast < RObject * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        QSharedPointer < RObject >(o0->clone());
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RObject >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RObject >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .",
                           //    context);                    
                    }

                    //QSharedPointer < RObject > 
                    //a0 =
                    //QSharedPointer < RObject >(o0->clone());
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isArray
                    QSet < RPropertyTypeId >
                    a2;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(2),
                        a2
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->addObject(a0
        ,
    a1
        ,
    a2);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.addObject().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::addObject", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::addAffectedObject
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::addAffectedObject", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::addAffectedObject";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("addAffectedObject", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RObject::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RObject::Id
                    a0 =
                    (RObject::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addAffectedObject(a0);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RObject > */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RObject > 
                    a0;

                    // argument might be a simple pointer:
                     RObject * o0 = 
                    qscriptvalue_cast < RObject * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        QSharedPointer < RObject >(o0->clone());
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RObject >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RObject >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .",
                           //    context);                    
                    }

                    //QSharedPointer < RObject > 
                    //a0 =
                    //QSharedPointer < RObject >(o0->clone());
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addAffectedObject(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.addAffectedObject().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::addAffectedObject", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::addAffectedObjects
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::addAffectedObjects", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::addAffectedObjects";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("addAffectedObjects", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QSet < RObject::Id > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QSet < RObject::Id >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addAffectedObjects(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.addAffectedObjects().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::addAffectedObjects", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::deleteObject
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::deleteObject", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::deleteObject";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("deleteObject", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RObject::Id */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RObject::Id
                    a0 =
                    (RObject::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument is pointer
                    RDocument * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RTransaction: Argument 1 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->deleteObject(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSharedPointer < RObject > */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is SharedPointer
                    QSharedPointer < RObject > 
                    a0;

                    // argument might be a simple pointer:
                     RObject * o0 = 
                    qscriptvalue_cast < RObject * > (context->argument(0));

                    if (o0!=NULL) {
                        a0 =
                        QSharedPointer < RObject >(o0->clone());
                    }
                    else {
                        // qscriptvalue_cast to QSharedPointer<BaseClass> does not work
                        QSharedPointer < RObject >*
                        p0;

                        p0 =
                        qscriptvalue_cast <QSharedPointer < RObject >* > (context->argument(0));

                        if (p0==NULL) {
                           return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .", context);                    
                        }

                        a0 = *p0;

                           //return REcmaHelper::throwError("RTransaction: Argument 0 is not of type  RObject .",
                           //    context);                    
                    }

                    //QSharedPointer < RObject > 
                    //a0 =
                    //QSharedPointer < RObject >(o0->clone());
                
                    // argument is pointer
                    RDocument * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RTransaction: Argument 1 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->deleteObject(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.deleteObject().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::deleteObject", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::getAffectedObjects
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::getAffectedObjects", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::getAffectedObjects";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("getAffectedObjects", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < RObject::Id >'
    QList < RObject::Id > cppResult =
        
               self->getAffectedObjects();
        // return type: QList < RObject::Id >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.getAffectedObjects().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::getAffectedObjects", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::getStatusChanges
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::getStatusChanges", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::getStatusChanges";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("getStatusChanges", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RObject::Id >'
    QSet < RObject::Id > cppResult =
        
               self->getStatusChanges();
        // return type: QSet < RObject::Id >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.getStatusChanges().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::getStatusChanges", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::getPropertyChanges
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::getPropertyChanges", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::getPropertyChanges";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("getPropertyChanges", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QMap < RObject::Id , QList < RPropertyChange > >'
    QMap < RObject::Id , QList < RPropertyChange > > cppResult =
        
               self->getPropertyChanges();
        // return type: QMap < RObject::Id , QList < RPropertyChange > >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.getPropertyChanges().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::getPropertyChanges", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::hasOnlyChanges
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::hasOnlyChanges", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::hasOnlyChanges";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("hasOnlyChanges", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasOnlyChanges();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.hasOnlyChanges().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::hasOnlyChanges", context, engine);
            return result;
        }
         QScriptValue
        REcmaTransaction::fail
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaTransaction::fail", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaTransaction::fail";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTransaction* self = 
                        getSelf("fail", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->fail();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTransaction.fail().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaTransaction::fail", context, engine);
            return result;
        }
         QScriptValue REcmaTransaction::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RTransaction* self = getSelf("toString", context);
    
    QString result;
    
            QDebug d(&result);
            if (self!=NULL) {
                d << *self;
            }
            else {
                d << "NULL";
            }
        
    return QScriptValue(result);
    }
     QScriptValue REcmaTransaction::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RTransaction cp = qscriptvalue_cast<RTransaction>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaTransaction::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RTransaction* self = getSelf("RTransaction", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RTransaction* REcmaTransaction::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RTransaction* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RTransaction >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RTransaction.%1(): "
                        "This object is not a RTransaction").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RTransaction* REcmaTransaction::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RTransaction* selfBase = getSelf(fName, context);
                RTransaction* self = dynamic_cast<RTransaction*>(selfBase);
                //return REcmaHelper::scriptValueTo<RTransaction >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RTransaction.%1(): "
                    "This object is not a RTransaction").arg(fName),
                    context);
            }

            return self;
            


        }
        