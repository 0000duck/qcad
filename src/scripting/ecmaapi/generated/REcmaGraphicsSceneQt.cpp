// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaGraphicsSceneQt.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RGraphicsViewImage.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaGraphicsScene.h"
                 void REcmaGraphicsSceneQt::init(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RGraphicsSceneQt*) 0)));
        protoCreated = true;
    }

    
        // primary base class RGraphicsScene:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<RGraphicsScene*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class RGraphicsScene
        REcmaHelper::registerFunction(&engine, proto, getRGraphicsScene, "getRGraphicsScene");
        
        // conversion for base class RExporter
        REcmaHelper::registerFunction(&engine, proto, getRExporter, "getRExporter");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getGraphicsView, "getGraphicsView");
            
            REcmaHelper::registerFunction(&engine, proto, clear, "clear");
            
            REcmaHelper::registerFunction(&engine, proto, updateSelectionStatus, "updateSelectionStatus");
            
            REcmaHelper::registerFunction(&engine, proto, clearPreview, "clearPreview");
            
            REcmaHelper::registerFunction(&engine, proto, beginPath, "beginPath");
            
            REcmaHelper::registerFunction(&engine, proto, endPath, "endPath");
            
            REcmaHelper::registerFunction(&engine, proto, unexportEntity, "unexportEntity");
            
            REcmaHelper::registerFunction(&engine, proto, exportPoint, "exportPoint");
            
            REcmaHelper::registerFunction(&engine, proto, exportLine, "exportLine");
            
            REcmaHelper::registerFunction(&engine, proto, exportArc, "exportArc");
            
            REcmaHelper::registerFunction(&engine, proto, exportEllipse, "exportEllipse");
            
            REcmaHelper::registerFunction(&engine, proto, exportPolyline, "exportPolyline");
            
            REcmaHelper::registerFunction(&engine, proto, exportPolylineFill, "exportPolylineFill");
            
            REcmaHelper::registerFunction(&engine, proto, exportSpline, "exportSpline");
            
            REcmaHelper::registerFunction(&engine, proto, exportArcSegment, "exportArcSegment");
            
            REcmaHelper::registerFunction(&engine, proto, exportLineSegment, "exportLineSegment");
            
            REcmaHelper::registerFunction(&engine, proto, exportXLine, "exportXLine");
            
            REcmaHelper::registerFunction(&engine, proto, exportTriangle, "exportTriangle");
            
            REcmaHelper::registerFunction(&engine, proto, exportRectangle, "exportRectangle");
            
            REcmaHelper::registerFunction(&engine, proto, exportPainterPathSource, "exportPainterPathSource");
            
            REcmaHelper::registerFunction(&engine, proto, exportPainterPaths, "exportPainterPaths");
            
            REcmaHelper::registerFunction(&engine, proto, exportImage, "exportImage");
            
            REcmaHelper::registerFunction(&engine, proto, getPatternFactor, "getPatternFactor");
            
            REcmaHelper::registerFunction(&engine, proto, highlightEntity, "highlightEntity");
            
            REcmaHelper::registerFunction(&engine, proto, deletePainterPaths, "deletePainterPaths");
            
            REcmaHelper::registerFunction(&engine, proto, getPainterPaths, "getPainterPaths");
            
            REcmaHelper::registerFunction(&engine, proto, getPreviewPainterPaths, "getPreviewPainterPaths");
            
            REcmaHelper::registerFunction(&engine, proto, hasImageFor, "hasImageFor");
            
            REcmaHelper::registerFunction(&engine, proto, getImage, "getImage");
            
            REcmaHelper::registerFunction(&engine, proto, addPath, "addPath");
            
            REcmaHelper::registerFunction(&engine, proto, addToPreview, "addToPreview");
            
            REcmaHelper::registerFunction(&engine, proto, startEntity, "startEntity");
            
            REcmaHelper::registerFunction(&engine, proto, dump, "dump");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RGraphicsSceneQt*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(create, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RGraphicsSceneQt",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaGraphicsSceneQt::create(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RGraphicsSceneQt(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RDocumentInterface */
            
    ){
    // prepare arguments:
    
                    // argument is reference
                    RDocumentInterface*
                    ap0 =
                    qscriptvalue_cast<
                    RDocumentInterface*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RDocumentInterface*.",
                               context);                    
                    }
                    RDocumentInterface& a0 = *ap0;
                
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RGraphicsSceneQt
                    * cppResult =
                    new
                    RGraphicsSceneQt
                    (
                    a0
                    );
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RGraphicsSceneQt(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaGraphicsSceneQt::getRGraphicsScene(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RGraphicsScene* cppResult =
                    qscriptvalue_cast<RGraphicsSceneQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaGraphicsSceneQt::getRExporter(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RExporter* cppResult =
                    qscriptvalue_cast<RGraphicsSceneQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaGraphicsSceneQt::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RGraphicsSceneQt"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaGraphicsSceneQt::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("RGraphicsScene");
    
        list.append("RExporter");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaGraphicsSceneQt::getGraphicsView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::getGraphicsView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::getGraphicsView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("getGraphicsView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RGraphicsViewImage *'
    RGraphicsViewImage * cppResult =
        
               self->getGraphicsView();
        // return type: RGraphicsViewImage *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.getGraphicsView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::getGraphicsView", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::clear
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::clear", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::clear";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("clear", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clear();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.clear().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::clear", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::updateSelectionStatus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::updateSelectionStatus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::updateSelectionStatus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("updateSelectionStatus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isArray()
        ) /* type: QSet < REntity::Id > */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QSet < REntity::Id >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateSelectionStatus(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.updateSelectionStatus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::updateSelectionStatus", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::clearPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::clearPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::clearPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("clearPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clearPreview();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.clearPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::clearPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::beginPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::beginPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::beginPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("beginPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->beginPath();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.beginPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::beginPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::endPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::endPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::endPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("endPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->endPath();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.endPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::endPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::unexportEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::unexportEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::unexportEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("unexportEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->unexportEntity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.unexportEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::unexportEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPoint */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPoint*
                    ap0 =
                    qscriptvalue_cast<
                    RPoint*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RPoint.",
                               context);                    
                    }
                    RPoint 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPoint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportLine
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportLine", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportLine";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportLine", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLine(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLine(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportLine().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportLine", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportArc
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportArc", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportArc";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportArc", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RArc */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RArc*
                    ap0 =
                    qscriptvalue_cast<
                    RArc*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RArc.",
                               context);                    
                    }
                    RArc 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportArc(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RArc */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RArc*
                    ap0 =
                    qscriptvalue_cast<
                    RArc*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RArc.",
                               context);                    
                    }
                    RArc 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportArc(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportArc().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportArc", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportEllipse
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportEllipse", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportEllipse";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportEllipse", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REllipse */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    REllipse*
                    ap0 =
                    qscriptvalue_cast<
                    REllipse*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type REllipse.",
                               context);                    
                    }
                    REllipse 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEllipse(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REllipse */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    REllipse*
                    ap0 =
                    qscriptvalue_cast<
                    REllipse*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type REllipse.",
                               context);                    
                    }
                    REllipse 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEllipse(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportEllipse().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportEllipse", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportPolyline
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportPolyline", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportPolyline";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportPolyline", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPolyline */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPolyline*
                    ap0 =
                    qscriptvalue_cast<
                    RPolyline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RPolyline.",
                               context);                    
                    }
                    RPolyline 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPolyline(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPolyline */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPolyline*
                    ap0 =
                    qscriptvalue_cast<
                    RPolyline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RPolyline.",
                               context);                    
                    }
                    RPolyline 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPolyline(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportPolyline().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportPolyline", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportPolylineFill
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportPolylineFill", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportPolylineFill";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportPolylineFill", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPolyline */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPolyline*
                    ap0 =
                    qscriptvalue_cast<
                    RPolyline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RPolyline.",
                               context);                    
                    }
                    RPolyline 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPolylineFill(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportPolylineFill().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportPolylineFill", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportSpline
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportSpline", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportSpline";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportSpline", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSpline */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RSpline*
                    ap0 =
                    qscriptvalue_cast<
                    RSpline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RSpline.",
                               context);                    
                    }
                    RSpline 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportSpline(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSpline */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RSpline*
                    ap0 =
                    qscriptvalue_cast<
                    RSpline*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RSpline.",
                               context);                    
                    }
                    RSpline 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportSpline(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportSpline().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportSpline", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportArcSegment
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportArcSegment", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportArcSegment";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportArcSegment", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RArc */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RArc*
                    ap0 =
                    qscriptvalue_cast<
                    RArc*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RArc.",
                               context);                    
                    }
                    RArc 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportArcSegment(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportArcSegment().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportArcSegment", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportLineSegment
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportLineSegment", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportLineSegment";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportLineSegment", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportLineSegment(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportLineSegment().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportLineSegment", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportXLine
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportXLine", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportXLine";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportXLine", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportXLine(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportXLine().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportXLine", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportTriangle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportTriangle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportTriangle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportTriangle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTriangle */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTriangle*
                    ap0 =
                    qscriptvalue_cast<
                    RTriangle*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RTriangle.",
                               context);                    
                    }
                    RTriangle 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportTriangle(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportTriangle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportTriangle", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportRectangle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportRectangle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportRectangle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportRectangle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap1 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 1 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportRectangle(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportRectangle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportRectangle", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportPainterPathSource
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportPainterPathSource", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportPainterPathSource";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportPainterPathSource", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPathSource */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RPainterPathSource*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPathSource*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RPainterPathSource*.",
                               context);                    
                    }
                    RPainterPathSource& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPainterPathSource(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportPainterPathSource().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportPainterPathSource", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportPainterPaths
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportPainterPaths", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportPainterPaths";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportPainterPaths", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportPainterPaths(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportPainterPaths().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportPainterPaths", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::exportImage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::exportImage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::exportImage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("exportImage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RImageData */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RImageData*
                    ap0 =
                    qscriptvalue_cast<
                    RImageData*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RImageData*.",
                               context);                    
                    }
                    RImageData& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportImage(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.exportImage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::exportImage", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::getPatternFactor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::getPatternFactor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::getPatternFactor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("getPatternFactor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getPatternFactor();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.getPatternFactor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::getPatternFactor", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::highlightEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::highlightEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::highlightEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("highlightEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntity */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntity*
                    ap0 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->highlightEntity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.highlightEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::highlightEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::deletePainterPaths
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::deletePainterPaths", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::deletePainterPaths";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("deletePainterPaths", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->deletePainterPaths();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.deletePainterPaths().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::deletePainterPaths", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::getPainterPaths
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::getPainterPaths", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::getPainterPaths";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("getPainterPaths", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'QList < RPainterPath >'
    QList < RPainterPath > cppResult =
        
               self->getPainterPaths(a0);
        // return type: QList < RPainterPath >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.getPainterPaths().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::getPainterPaths", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::getPreviewPainterPaths
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::getPreviewPainterPaths", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::getPreviewPainterPaths";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("getPreviewPainterPaths", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < RPainterPath >'
    QList < RPainterPath > cppResult =
        
               self->getPreviewPainterPaths();
        // return type: QList < RPainterPath >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.getPreviewPainterPaths().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::getPreviewPainterPaths", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::hasImageFor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::hasImageFor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::hasImageFor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("hasImageFor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasImageFor(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.hasImageFor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::hasImageFor", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::getImage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::getImage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::getImage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("getImage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RImageData'
    RImageData cppResult =
        
               self->getImage(a0);
        // return type: RImageData
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.getImage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::getImage", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::addPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::addPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::addPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("addPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: REntity::Id */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RPainterPath */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    REntity::Id
                    a0 =
                    (REntity::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPainterPath*
                    ap1 =
                    qscriptvalue_cast<
                    RPainterPath*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 1 is not of type RPainterPath.",
                               context);                    
                    }
                    RPainterPath 
                    a1 = 
                    *ap1;
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPath(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.addPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::addPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::addToPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::addToPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::addToPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("addToPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < RPainterPath > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < RPainterPath >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addToPreview(a0);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsSceneQt: Argument 0 is not of type RPainterPath.",
                               context);                    
                    }
                    RPainterPath 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addToPreview(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.addToPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::addToPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::startEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::startEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::startEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("startEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->startEntity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.startEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::startEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsSceneQt::dump
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsSceneQt::dump", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsSceneQt::dump";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsSceneQt* self = 
                        getSelf("dump", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->dump();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsSceneQt.dump().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsSceneQt::dump", context, engine);
            return result;
        }
         QScriptValue REcmaGraphicsSceneQt::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RGraphicsSceneQt* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RGraphicsSceneQt(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaGraphicsSceneQt::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RGraphicsSceneQt* self = getSelf("RGraphicsSceneQt", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RGraphicsSceneQt* REcmaGraphicsSceneQt::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RGraphicsSceneQt* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RGraphicsSceneQt >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RGraphicsSceneQt.%1(): "
                        "This object is not a RGraphicsSceneQt").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RGraphicsSceneQt* REcmaGraphicsSceneQt::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RGraphicsSceneQt* selfBase = getSelf(fName, context);
                RGraphicsSceneQt* self = dynamic_cast<RGraphicsSceneQt*>(selfBase);
                //return REcmaHelper::scriptValueTo<RGraphicsSceneQt >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RGraphicsSceneQt.%1(): "
                    "This object is not a RGraphicsSceneQt").arg(fName),
                    context);
            }

            return self;
            


        }
        